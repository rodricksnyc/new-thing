{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/index.ts"],"sourcesContent":["export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  },\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    return result!\n  }\n}\n","import { memo } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  smoothScroll?: boolean\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\ninterface Item {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n}\n\ninterface Rect {\n  width: number\n  height: number\n}\n\nexport interface VirtualItem<TItemElement> extends Item {\n  measureElement: (el: TItemElement | null) => void\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nconst memoRectCallback = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  let prev: Rect = { height: -1, width: -1 }\n\n  return (rect: Rect) => {\n    if (\n      instance.options.horizontal\n        ? rect.width !== prev.width\n        : rect.height !== prev.height\n    ) {\n      cb(rect)\n    }\n\n    prev = rect\n  }\n}\n\nexport const observeElementRect = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const observer = new ResizeObserver((entries) => {\n    cb({\n      width: entries[0]?.contentRect.width as number,\n      height: entries[0]?.contentRect.height as number\n    })\n  })\n\n  if (!instance.scrollElement) {\n    return\n  }\n\n  cb(instance.scrollElement.getBoundingClientRect())\n\n  observer.observe(instance.scrollElement)\n\n  return () => {\n    observer.unobserve(instance.scrollElement)\n  }\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const memoizedCallback = memoRectCallback(instance, cb)\n  const onResize = () =>\n    memoizedCallback({\n      width: instance.scrollElement.innerWidth,\n      height: instance.scrollElement.innerHeight,\n    })\n\n  if (!instance.scrollElement) {\n    return\n  }\n\n  onResize()\n\n  instance.scrollElement.addEventListener('resize', onResize, {\n    capture: false,\n    passive: true,\n  })\n\n  return () => {\n    instance.scrollElement.removeEventListener('resize', onResize)\n  }\n}\n\ntype ObserverMode = 'element' | 'window'\n\nconst scrollProps = {\n  element: ['scrollLeft', 'scrollTop'],\n  window: ['scrollX', 'scrollY'],\n} as const\n\nconst createOffsetObserver = (mode: ObserverMode) => {\n  return (instance: Virtualizer<any, any>, cb: (offset: number) => void) => {\n    if (!instance.scrollElement) {\n      return\n    }\n\n    const propX = scrollProps[mode][0]\n    const propY = scrollProps[mode][1]\n\n    let prevX: number = instance.scrollElement[propX]\n    let prevY: number = instance.scrollElement[propY]\n\n    const scroll = () => {\n      cb(instance.scrollElement[instance.options.horizontal ? propX : propY])\n    }\n\n    scroll()\n\n    const onScroll = (e: Event) => {\n      const target = e.currentTarget as HTMLElement & Window\n      const scrollX = target[propX]\n      const scrollY = target[propY]\n\n      if (instance.options.horizontal ? prevX - scrollX : prevY - scrollY) {\n        scroll()\n      }\n\n      prevX = scrollX\n      prevY = scrollY\n    }\n\n    instance.scrollElement.addEventListener('scroll', onScroll, {\n      capture: false,\n      passive: true,\n    })\n\n    return () => {\n      instance.scrollElement.removeEventListener('scroll', onScroll)\n    }\n  }\n}\n\nexport const observeElementOffset = createOffsetObserver('element')\nexport const observeWindowOffset = createOffsetObserver('window')\n\nexport const measureElement = (\n  element: unknown,\n  instance: Virtualizer<any, any>,\n) => {\n  return (element as Element).getBoundingClientRect()[\n    instance.options.horizontal ? 'width' : 'height'\n  ]\n}\n\nexport const windowScroll = (\n  offset: number,\n  canSmooth: boolean,\n  instance: Virtualizer<any, any>,\n) => {\n  ;(instance.scrollElement as Window)?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: offset,\n    behavior: canSmooth ? 'smooth' : undefined,\n  })\n}\n\nexport const elementScroll = (\n  offset: number,\n  canSmooth: boolean,\n  instance: Virtualizer<any, any>,\n) => {\n  ;(instance.scrollElement as Element)?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: offset,\n    behavior: canSmooth ? 'smooth' : undefined,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement = unknown,\n  TItemElement = unknown,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    canSmooth: boolean,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (instance: Virtualizer<TScrollElement, TItemElement>) => void\n  measureElement?: (\n    el: TItemElement,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  enableSmoothScroll?: boolean\n}\n\nexport class Virtualizer<TScrollElement = unknown, TItemElement = unknown> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  private measurementsCache: Item[] = []\n  private itemMeasurementsCache: Record<Key, number> = {}\n  private pendingMeasuredCacheIndexes: number[] = []\n  private scrollRect: Rect\n  private scrollOffset: number\n  private destinationOffset: undefined | number\n  private scrollCheckFrame!: ReturnType<typeof setTimeout>\n  private measureElementCache: Record<\n    number,\n    (measurableItem: TItemElement | null) => void\n  > = {}\n  private range: { startIndex: number; endIndex: number } = {\n    startIndex: 0,\n    endIndex: 0,\n  }\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset = this.options.initialOffset\n\n    this.calculateRange()\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      enableSmoothScroll: true,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      ...opts,\n    }\n  }\n\n  private notify = () => {\n    this.options.onChange?.(this)\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    return () => {\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n      this._scrollToOffset(this.scrollOffset, false)\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.calculateRange()\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset) => {\n          this.scrollOffset = offset\n          this.calculateRange()\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getMeasurements = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.getItemKey,\n      this.itemMeasurementsCache,\n    ],\n    (count, paddingStart, getItemKey, measurementsCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n        const measuredSize = measurementsCache[key]\n        const start = measurements[i - 1]\n          ? measurements[i - 1]!.end\n          : paddingStart\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n        const end = start + size\n        measurements[i] = { index: i, start, size, end, key }\n      }\n\n      this.measurementsCache = measurements\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      const range = calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset,\n      })\n      if (\n        range.startIndex !== this.range.startIndex ||\n        range.endIndex !== this.range.endIndex\n      ) {\n        this.range = range\n        this.notify()\n      }\n      return this.range\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.range,\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return rangeExtractor({\n        ...range,\n        overscan,\n        count: count,\n      })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItems = memo(\n    () => [\n      this.getIndexes(),\n      this.getMeasurements(),\n      this.options.measureElement,\n    ],\n    (indexes, measurements, measureElement) => {\n      const makeMeasureElement =\n        (index: number) => (measurableItem: TItemElement | null) => {\n          const item = this.measurementsCache[index]!\n\n          if (!measurableItem) {\n            return\n          }\n\n          const measuredItemSize = measureElement(measurableItem, this)\n          const itemSize = this.itemMeasurementsCache[item.key] ?? item.size\n\n          if (measuredItemSize !== itemSize) {\n            if (item.start < this.scrollOffset) {\n              if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n                console.info('correction', measuredItemSize - itemSize)\n              }\n\n              if (!this.destinationOffset) {\n                this._scrollToOffset(\n                  this.scrollOffset + (measuredItemSize - itemSize),\n                  false,\n                )\n              }\n            }\n\n            this.pendingMeasuredCacheIndexes.push(index)\n            this.itemMeasurementsCache = {\n              ...this.itemMeasurementsCache,\n              [item.key]: measuredItemSize,\n            }\n            this.notify()\n          }\n        }\n\n      const virtualItems: VirtualItem<TItemElement>[] = []\n\n      const currentMeasureElements: typeof this.measureElementCache = {}\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        const item = {\n          ...measurement,\n          measureElement: (currentMeasureElements[i] =\n            this.measureElementCache[i] ?? makeMeasureElement(i)),\n        }\n        virtualItems.push(item)\n      }\n\n      this.measureElementCache = currentMeasureElements\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', smoothScroll = this.options.enableSmoothScroll }: ScrollToOffsetOptions = {},\n  ) => {\n    const offset = this.scrollOffset\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= offset) {\n        align = 'start'\n      } else if (toOffset >= offset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n        this._scrollToOffset(toOffset, smoothScroll)\n      } else if (align === 'end') {\n        this._scrollToOffset(toOffset - size, smoothScroll)\n      } else if (align === 'center') {\n        this._scrollToOffset(toOffset - size / 2, smoothScroll)\n    }\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align = 'auto', smoothScroll = this.options.enableSmoothScroll, ...rest }: ScrollToIndexOptions = {},\n  ) => {\n    const measurements = this.getMeasurements()\n    const offset = this.scrollOffset\n    const size = this.getSize()\n    const { count } = this.options\n\n    const measurement = measurements[Math.max(0, Math.min(index, count - 1))]\n\n    if (!measurement) {\n      return\n    }\n\n    if (align === 'auto') {\n      if (measurement.end >= offset + size - this.options.scrollPaddingEnd) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        offset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    this.scrollToOffset(toOffset, { align, smoothScroll, ...rest })\n  }\n\n  getTotalSize = () =>\n    (this.getMeasurements()[this.options.count - 1]?.end ||\n      this.options.paddingStart) + this.options.paddingEnd\n\n  private _scrollToOffset = (offset: number, canSmooth: boolean) => {\n    clearTimeout(this.scrollCheckFrame)\n\n    this.destinationOffset = offset\n    this.options.scrollToFn(\n      offset,\n      canSmooth,\n      this,\n    )\n\n    let scrollCheckFrame: ReturnType<typeof setTimeout>\n\n    const check = () => {\n      let lastOffset = this.scrollOffset\n      this.scrollCheckFrame = scrollCheckFrame = setTimeout(() => {\n        if (this.scrollCheckFrame !== scrollCheckFrame) {\n          return\n        }\n\n        if (this.scrollOffset === lastOffset) {\n          this.destinationOffset = undefined\n          return\n        }\n        lastOffset = this.scrollOffset\n        check()\n      }, 100)\n    }\n\n    check()\n  }\n\n  measure = () => {\n    this.itemMeasurementsCache = {}\n    this.notify()\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: Item[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n"],"names":["memo","getDeps","fn","opts","result","deps","depTime","key","debug","Date","now","newDeps","length","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","defaultKeyExtractor","defaultRangeExtractor","range","start","startIndex","overscan","end","endIndex","count","arr","i","push","scrollProps","element","window","createOffsetObserver","mode","instance","cb","scrollElement","propX","propY","prevX","prevY","scroll","options","horizontal","onScroll","e","target","currentTarget","scrollX","scrollY","addEventListener","capture","passive","removeEventListener","observeElementOffset","observeWindowOffset","measureElement","getBoundingClientRect","constructor","_this","this","unsubs","measurementsCache","itemMeasurementsCache","pendingMeasuredCacheIndexes","measureElementCache","setOptions","Object","entries","forEach","_ref","value","initialOffset","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","getItemKey","rangeExtractor","enableSmoothScroll","initialRect","width","height","notify","_this$options$onChang","_this$options","call","cleanup","filter","Boolean","d","_didMount","_willUpdate","getScrollElement","_scrollToOffset","scrollOffset","observeElementRect","rect","scrollRect","calculateRange","offset","getSize","getMeasurements","measurements","slice","measuredSize","size","estimateSize","process","outerSize","_ref2","low","high","getCurrentValue","middle","currentValue","findNearestBinarySearch","getIndexes","getVirtualItems","indexes","makeMeasureElement","measurableItem","_this$itemMeasurement","item","measuredItemSize","itemSize","destinationOffset","virtualItems","currentMeasureElements","k","len","_this$measureElementC","scrollToOffset","toOffset","_temp","align","smoothScroll","scrollToIndex","_temp2","rest","measurement","getTotalSize","_this$getMeasurements","canSmooth","scrollCheckFrame","clearTimeout","scrollToFn","check","lastOffset","setTimeout","undefined","measure","_instance$scrollEleme2","scrollTo","behavior","observer","ResizeObserver","_entries$","_entries$2","contentRect","observe","unobserve","memoizedCallback","prev","memoRectCallback","onResize","innerWidth","innerHeight","_instance$scrollEleme"],"mappings":"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"}