import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
var _excluded = ["label", "subdued", "maxWidth", "isEmpty", "isHoverTarget", "hasError", "onClick"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { ChipButton } from '@looker/components';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
var MAX_TOKEN_WIDTH = '20rem';
export var Token = forwardRef(function (_ref, ref) {
  var label = _ref.label,
      _ref$subdued = _ref.subdued,
      subdued = _ref$subdued === void 0 ? true : _ref$subdued,
      maxWidth = _ref.maxWidth,
      isEmpty = _ref.isEmpty,
      isHoverTarget = _ref.isHoverTarget,
      hasError = _ref.hasError,
      onClick = _ref.onClick,
      props = _objectWithoutProperties(_ref, _excluded);

  var showError = !props['aria-expanded'] && hasError;
  var TokenComponent;

  if (isHoverTarget) {
    TokenComponent = DropTargetToken;
  } else if (isEmpty) {
    TokenComponent = EmptyToken;
  } else {
    TokenComponent = TokenBase;
  }

  return React.createElement(TokenComponent, {
    showError: showError,
    onClick: onClick,
    maxWidth: maxWidth,
    ref: ref,
    role: "button",
    "aria-selected": !subdued
  }, label);
});
Token.displayName = 'Token';
var TokenBase = styled(ChipButton).withConfig({
  displayName: "Token__TokenBase",
  componentId: "sc-194gay4-0"
})(["", " max-width:", ";"], function (_ref2) {
  var theme = _ref2.theme,
      showError = _ref2.showError;
  return showError && "border: 1px solid ".concat(theme.colors.criticalBorder, ";");
}, function (_ref3) {
  var maxWidth = _ref3.maxWidth;
  return maxWidth || MAX_TOKEN_WIDTH;
});
var DropTargetToken = styled(TokenBase).withConfig({
  displayName: "Token__DropTargetToken",
  componentId: "sc-194gay4-1"
})(["&:hover{border-color:", ";}"], function (_ref4) {
  var theme = _ref4.theme;
  return theme.colors.key;
});
var EmptyToken = styled(TokenBase).withConfig({
  displayName: "Token__EmptyToken",
  componentId: "sc-194gay4-2"
})(["&[aria-selected='false']{background:", ";border:1px dashed ", ";color:", ";}"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.colors.ui1;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.colors.ui4;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.colors.text1;
});
export var SubduedToken = styled(TokenBase).withConfig({
  displayName: "Token__SubduedToken",
  componentId: "sc-194gay4-3"
})(["font-weight:normal;&:hover{cursor:not-allowed;}"]);
//# sourceMappingURL=Token.js.map