import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["config", "maxWidth", "onClick", "userAttributes"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import { Popover, PopoverContent } from '@looker/components';
import { getExpressionType, getUserAttributeMatchingTypeAndExpression } from '@looker/filter-expressions';
import { ERROR_TYPE } from '../constants';
import { Filter } from '../Filter/Filter';
import { FilterErrorMessage, useFiltersErrors } from '../FilterErrorMessage';
import { Token } from './Token';
import { getLabel } from './utils/get_label';
export var FilterToken = forwardRef(function (_ref, ref) {
  var config = _ref.config,
      maxWidth = _ref.maxWidth,
      onClick = _ref.onClick,
      userAttributes = _ref.userAttributes,
      props = _objectWithoutProperties(_ref, _excluded);

  var expressionType = props.expressionType || getExpressionType({
    type: props.type,
    field: props.field || undefined
  });
  var label = getLabel(_objectSpread(_objectSpread({}, props), {}, {
    type: expressionType,
    userAttributes: userAttributes
  }));
  var hasError = useFiltersErrors([props], {
    userAttributes: userAttributes
  }).type === ERROR_TYPE;
  var userAttribute = getUserAttributeMatchingTypeAndExpression(expressionType, props.expression, userAttributes);
  var isSubdued = props.expression === '' || props.expression === undefined || !!userAttribute && !userAttribute.value;
  var content = React.createElement(Filter, _extends({
    expressionType: expressionType,
    config: config,
    inline: (config === null || config === void 0 ? void 0 : config.display) === 'inline',
    userAttributes: userAttributes
  }, props));

  if ((config === null || config === void 0 ? void 0 : config.display) === 'inline') {
    return content;
  }

  var popoverContent = React.createElement(PopoverContent, {
    maxWidth: "90vw",
    py: "large"
  }, content, React.createElement(FilterErrorMessage, {
    filters: [props],
    userAttributes: userAttributes,
    useLongMessageForm: true
  }));
  return React.createElement(Popover, {
    content: popoverContent,
    placement: "bottom-start",
    ref: ref
  }, React.createElement(Token, {
    label: label,
    subdued: isSubdued,
    hasError: hasError,
    maxWidth: maxWidth,
    onClick: onClick
  }));
});
//# sourceMappingURL=FilterToken.js.map