/// <reference types="react" />
import type { IDashboardFilter, ILookmlModelExploreField } from '@looker/sdk';
import type { IAPIMethods } from '@looker/sdk-rtl';
export interface UseSuggestableProps {
    filter: IDashboardFilter;
    sdk?: IAPIMethods;
}
export declare const useSuggestable: ({ filter, sdk }: UseSuggestableProps) => {
    errorMessage: string;
    suggestableProps: {
        type?: string | undefined;
        expressionType?: import("packages/filter-expressions/src").FilterExpressionType | undefined;
        config?: any;
        expression: string;
        name: string;
        isLinked?: boolean | undefined;
        isLoading: boolean;
        isRequired?: boolean | undefined;
        inline?: boolean | undefined;
        onChange?: ((value: import("../Filter/types/filter_props").FilterChangeProps) => void) | undefined;
        onInputChange: import("react").Dispatch<import("react").SetStateAction<string>> | ((value: string) => void);
        loadUserAttributes?: (() => void) | undefined;
        userAttributes?: import("packages/filter-expressions/src").UserAttributeWithValue[] | undefined;
        suggestions?: string[] | undefined;
        enumerations?: import("..").Option[] | null | undefined;
        field?: ILookmlModelExploreField | null | undefined;
        dispatchConfigTypeChange?: boolean | undefined;
        skipFilterConfigCheck?: boolean | undefined;
        allowMultipleValues?: boolean | undefined;
    } | {
        suggestions: string[];
        isLoading: boolean;
        onInputChange: import("react").Dispatch<import("react").SetStateAction<string>>;
    } | {
        suggestions?: undefined;
        isLoading: boolean;
        onInputChange: import("react").Dispatch<import("react").SetStateAction<string>>;
    };
};
