var _excluded = ["filter", "sdk"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext, useEffect } from 'react';
import { Field, Status, Tooltip } from '@looker/components';
import { Filter } from '../Filter/Filter';
import { useValidationMessage } from '../Filter/utils';
import { useSuggestable } from './use_suggestable';
import { useExpressionState } from './use_expression_state';
import { FilterContext } from '../FilterCollection';
export var DashboardFilter = function DashboardFilter(_ref) {
  var filter = _ref.filter,
      sdk = _ref.sdk,
      rest = _objectWithoutProperties(_ref, _excluded);

  var id = filter.id,
      name = filter.name,
      type = filter.type,
      field = filter.field,
      required = filter.required,
      ui_config = filter.ui_config,
      allow_multiple_values = filter.allow_multiple_values;

  var _useContext = useContext(FilterContext),
      removeFilter = _useContext.removeFilter;

  useEffect(function () {
    return function () {
      removeFilter(filter);
    };
  }, [removeFilter, filter]);
  var stateProps = useExpressionState(_objectSpread({
    filter: filter
  }, rest));

  var _useSuggestable = useSuggestable({
    filter: filter,
    sdk: sdk
  }),
      errorMessage = _useSuggestable.errorMessage,
      suggestableProps = _useSuggestable.suggestableProps;

  var validationMessage = useValidationMessage(stateProps.expression, required);
  return React.createElement(Field, {
    id: id || '',
    label: name || '',
    detail: errorMessage && React.createElement(Tooltip, {
      content: errorMessage
    }, React.createElement(Status, {
      intent: "critical",
      "data-testid": "error-icon"
    })),
    validationMessage: validationMessage
  }, React.createElement(Filter, _extends({
    name: name || '',
    type: type || '',
    field: field,
    config: ui_config,
    isRequired: required
  }, suggestableProps, stateProps, {
    allowMultipleValues: !!allow_multiple_values
  })));
};
//# sourceMappingURL=DashboardFilter.js.map