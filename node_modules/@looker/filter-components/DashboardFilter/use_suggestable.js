function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "regenerator-runtime/runtime.js";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.promise.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import { model_fieldname_suggestions } from '@looker/sdk';
import { useContext, useEffect, useMemo, useState } from 'react';
import { useTranslation } from '../utils';
import { FilterContext } from '../FilterCollection';

var shouldFetchSuggestions = function shouldFetchSuggestions(field) {
  return (field === null || field === void 0 ? void 0 : field.suggestable) && !(field !== null && field !== void 0 && field.enumerations) && !(field !== null && field !== void 0 && field.suggestions);
};

var getOptionsProps = function getOptionsProps(field, fetchedSuggestions) {
  if (shouldFetchSuggestions(field)) {
    return {
      suggestions: fetchedSuggestions
    };
  }

  var _ref = field || {},
      enumerations = _ref.enumerations,
      suggestions = _ref.suggestions;

  if (enumerations) {
    return {
      enumerations: enumerations
    };
  }

  if (suggestions) {
    return {
      suggestions: suggestions
    };
  }

  return {};
};

var getLinkedFilterMap = function getLinkedFilterMap(filterMap, listensToFilters) {
  if (!listensToFilters || listensToFilters.length === 0) return undefined;
  return listensToFilters.reduce(function (acc, title) {
    if (filterMap[title]) {
      var _filterMap$title = filterMap[title],
          filter = _filterMap$title.filter,
          expression = _filterMap$title.expression;

      if (filter.dimension && expression) {
        acc[filter.dimension] = expression;
      }
    }

    return acc;
  }, {});
};

export var useSuggestable = function useSuggestable(_ref2) {
  var filter = _ref2.filter,
      sdk = _ref2.sdk;

  var _useContext = useContext(FilterContext),
      state = _useContext.state;

  var filterMap = state.filterMap;
  var field = filter.field;

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      searchTerm = _useState2[0],
      setSearchTerm = _useState2[1];

  var _useState3 = useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      errorMessage = _useState4[0],
      setErrorMessage = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isLoading = _useState6[0],
      setLoading = _useState6[1];

  var _useState7 = useState([]),
      _useState8 = _slicedToArray(_useState7, 2),
      fetchedSuggestions = _useState8[0],
      setSuggestions = _useState8[1];

  var _useTranslation = useTranslation('use_suggestable'),
      t = _useTranslation.t;

  var listens_to_filters = filter.listens_to_filters;
  var linkedFilterMap = useMemo(function () {
    return getLinkedFilterMap(filterMap, listens_to_filters);
  }, [filterMap, listens_to_filters]);
  useEffect(function () {
    var loadSuggestions = function () {
      var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var params, result;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(sdk && shouldFetchSuggestions(field))) {
                  _context.next = 15;
                  break;
                }

                setLoading(true);
                params = {
                  field_name: (field === null || field === void 0 ? void 0 : field.suggest_dimension) || '',
                  model_name: filter.model || '',
                  term: searchTerm,
                  view_name: (field === null || field === void 0 ? void 0 : field.suggest_explore) || (field === null || field === void 0 ? void 0 : field.view) || '',
                  filters: linkedFilterMap
                };
                _context.prev = 3;
                _context.next = 6;
                return sdk.ok(model_fieldname_suggestions(sdk, params));

              case 6:
                result = _context.sent;
                setLoading(false);
                setSuggestions(result.suggestions || []);
                _context.next = 15;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context["catch"](3);
                setLoading(false);
                setErrorMessage(t('Error loading suggestions'));

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[3, 11]]);
      }));

      return function loadSuggestions() {
        return _ref3.apply(this, arguments);
      };
    }();

    loadSuggestions();
  }, [filter.model, field, searchTerm, sdk, linkedFilterMap, t]);
  return {
    errorMessage: errorMessage,
    suggestableProps: _objectSpread({
      isLoading: isLoading,
      onInputChange: setSearchTerm
    }, getOptionsProps(field, fetchedSuggestions))
  };
};
//# sourceMappingURL=use_suggestable.js.map