import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { InputChips, InputText, SelectMulti } from '@looker/components';
import isArray from 'lodash/isArray';
import React, { useMemo } from 'react';
import styled from 'styled-components';
import { inputPlacementStyle, multiInputWidth } from '../../../../../../utils/filter_styles';
import { createOptions } from '../../../../../../utils/option_utils';
import { useOptionFiltering } from '../../../../../../utils/use_option_filtering';
import { usePlaceholder } from '../../../../../../utils/use_placeholder';
export var MultiStringInputLayout = function MultiStringInputLayout(_ref) {
  var className = _ref.className,
      onChange = _ref.onChange,
      onInputChange = _ref.onInputChange,
      isLoading = _ref.isLoading,
      item = _ref.item,
      disableCreate = _ref.disableCreate,
      suggestions = _ref.suggestions,
      enumerations = _ref.enumerations,
      validationMessage = _ref.validationMessage,
      id = _ref.id,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? multiInputWidth : _ref$width,
      height = _ref.height,
      _ref$showDropDownMenu = _ref.showDropDownMenu,
      showDropDownMenu = _ref$showDropDownMenu === void 0 ? true : _ref$showDropDownMenu;
  var values = isArray(item.value) ? item.value : [];
  var options = useMemo(function () {
    return suggestions ? createOptions(suggestions) : enumerations || [];
  }, [suggestions, enumerations]);

  var _useOptionFiltering = useOptionFiltering({
    excludeValues: true,
    onInputChange: onInputChange,
    options: options,
    value: item.value
  }),
      debouncedFilterTerm = _useOptionFiltering.debouncedFilterTerm,
      filteredOptions = _useOptionFiltering.filteredOptions,
      noOptionsLabel = _useOptionFiltering.noOptionsLabel,
      onFilter = _useOptionFiltering.onFilter;

  var handleChange = function handleChange(newValues) {
    onChange === null || onChange === void 0 ? void 0 : onChange(item.id, {
      value: newValues
    });
  };

  var placeholderProps = usePlaceholder(item.value, validationMessage);

  var commonProps = _objectSpread(_objectSpread({}, placeholderProps), {}, {
    className: className,
    height: height,
    id: id,
    maxHeight: 145,
    onChange: handleChange,
    noErrorIcon: true,
    validationType: validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.type,
    values: values,
    width: width
  });

  var noSuggestions = debouncedFilterTerm === '' && !suggestions && !enumerations;

  if (noSuggestions || showDropDownMenu === false) {
    return React.createElement(InputChips, commonProps);
  }

  return React.createElement(SelectMulti, _extends({}, commonProps, {
    options: filteredOptions,
    isFilterable: true,
    onFilter: onFilter,
    freeInput: !disableCreate,
    noOptionsLabel: noOptionsLabel,
    indicator: false,
    closeOnSelect: true,
    isLoading: isLoading
  }));
};
export var MultiStringInput = styled(MultiStringInputLayout).withConfig({
  displayName: "MultiStringInput",
  componentId: "sc-18howej-0"
})(["", " ", "{", "}"], inputPlacementStyle, InputText, inputPlacementStyle);
//# sourceMappingURL=MultiStringInput.js.map