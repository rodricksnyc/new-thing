var _excluded = ["item", "filterType", "onInputChange", "suggestions", "userAttributes", "isLoading", "onChange", "showMatchesAdvanced", "validationMessage"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.array.includes.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { convertOptionToType, convertTypeToOption, sanitizeString } from '@looker/filter-expressions';
import React from 'react';
import { GroupSelect } from '../GroupSelect';
import { stringFilterTypeToFilter } from './utils/string_filter_type_to_filter';
import { useStringFilterOptions, useFilterOptions } from '../../utils';
import { ItemLayout } from '../ItemLayout';
var typesUsingSuggestions = ['match', 'contains', 'startsWith', 'endsWith'];
export var StringFilter = function StringFilter(_ref) {
  var _rest$field;

  var item = _ref.item,
      filterType = _ref.filterType,
      onInputChange = _ref.onInputChange,
      suggestions = _ref.suggestions,
      userAttributes = _ref.userAttributes,
      isLoading = _ref.isLoading,
      onChange = _ref.onChange,
      showMatchesAdvanced = _ref.showMatchesAdvanced,
      validationMessage = _ref.validationMessage,
      rest = _objectWithoutProperties(_ref, _excluded);

  var isParameter = (_rest$field = rest.field) === null || _rest$field === void 0 ? void 0 : _rest$field.parameter;
  var stringFilterOptions = useStringFilterOptions(isParameter);
  var options = useFilterOptions(stringFilterOptions, !isParameter && showMatchesAdvanced);

  var typeChange = function typeChange(value) {
    return onChange(item.id, sanitizeString(_objectSpread(_objectSpread({}, item), convertOptionToType(String(value))), userAttributes));
  };

  var FilterComponent = stringFilterTypeToFilter(item.type, isParameter, rest.allowMultipleOptions);
  var selectValue = convertTypeToOption(item);
  return React.createElement(ItemLayout, _extends({
    item: item
  }, rest), React.createElement(GroupSelect, {
    value: selectValue,
    options: options,
    onChange: typeChange,
    validationType: validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.type,
    placement: ['blank', 'null'].includes(item.type) ? undefined : 'left'
  }), React.createElement(FilterComponent, {
    item: item,
    onInputChange: onInputChange,
    onChange: onChange,
    validationMessage: validationMessage,
    suggestions: typesUsingSuggestions.includes(item.type) ? suggestions : undefined,
    placement: "right",
    userAttributes: userAttributes,
    filterType: filterType,
    isLoading: isLoading
  }));
};
//# sourceMappingURL=StringFilter.js.map