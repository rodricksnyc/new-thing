import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { Space } from '@looker/components';
import React from 'react';
import { useTranslation } from '../../../../../../../utils';
import { GroupInput } from '../../../GroupInput';
import { GroupSelect } from '../../../GroupSelect';
import { MidInputLabel } from '../../../MidInputLabel';
import { useBetweenOptions } from '../../../../utils';
export var Between = function Between(_ref) {
  var item = _ref.item,
      onChange = _ref.onChange,
      validationMessage = _ref.validationMessage;

  var _useTranslation = useTranslation('Between'),
      t = _useTranslation.t;

  var betweenOptions = useBetweenOptions();
  var _item$high = item.high,
      high = _item$high === void 0 ? '' : _item$high,
      _item$low = item.low,
      low = _item$low === void 0 ? '' : _item$low,
      id = item.id;

  var lowChange = function lowChange(event) {
    onChange === null || onChange === void 0 ? void 0 : onChange(id, {
      low: event.target.value
    });
  };

  var highChange = function highChange(event) {
    onChange === null || onChange === void 0 ? void 0 : onChange(id, {
      high: event.target.value
    });
  };

  var selectChange = function selectChange(value) {
    onChange === null || onChange === void 0 ? void 0 : onChange(id, {
      bounds: value
    });
  };

  var validationProps = {
    noErrorIcon: true,
    validationType: validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.type
  };
  return React.createElement(Space, {
    gap: "none",
    width: "auto"
  }, React.createElement(GroupSelect, _extends({
    placement: "middle",
    value: item.bounds,
    options: betweenOptions,
    onChange: selectChange
  }, validationProps)), React.createElement(GroupInput, _extends({
    value: low,
    type: "number",
    onChange: lowChange,
    minWidth: "4.5em",
    "data-testid": "low"
  }, validationProps)), React.createElement(MidInputLabel, {
    validationType: validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.type
  }, t('AND')), React.createElement(GroupInput, _extends({
    value: high,
    type: "number",
    onChange: highChange,
    placement: "right",
    minWidth: "4.5em",
    "data-testid": "high"
  }, validationProps)));
};
//# sourceMappingURL=Between.js.map