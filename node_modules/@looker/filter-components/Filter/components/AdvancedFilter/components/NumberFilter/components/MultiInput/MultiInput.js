function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.number.constructor.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import { InputChips } from '@looker/components';
import React, { useRef, useEffect, useState } from 'react';
import { inputPlacementStyle, multiInputWidth } from '../../../../../../utils/filter_styles';
import styled from 'styled-components';

var validate = function validate(value) {
  return value !== '' && !isNaN(Number(value));
};

export var MultiInputInternal = function MultiInputInternal(_ref) {
  var className = _ref.className,
      item = _ref.item,
      onChange = _ref.onChange,
      width = _ref.width,
      placeholder = _ref.placeholder,
      validationMessage = _ref.validationMessage;
  var ref = useRef(null);
  var values = item.value.map(String);

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var handleChange = function handleChange(newValues) {
    onChange === null || onChange === void 0 ? void 0 : onChange(item.id, {
      value: newValues.map(Number)
    });
  };

  useEffect(function () {
    return function () {
      if (validate(inputValue) && !document.body.contains(ref.current)) {
        handleChange([].concat(_toConsumableArray(values), [inputValue]));
      }
    };
  }, [inputValue, values]);
  return React.createElement(InputChips, {
    ref: ref,
    width: width || multiInputWidth,
    className: className,
    placeholder: placeholder,
    values: values,
    onChange: handleChange,
    inputValue: inputValue,
    onInputChange: setInputValue,
    validate: validate,
    validationType: validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.type,
    noErrorIcon: true
  });
};
export var MultiInput = styled(MultiInputInternal).withConfig({
  displayName: "MultiInput",
  componentId: "sc-4quccd-0"
})(["", ""], inputPlacementStyle);
//# sourceMappingURL=MultiInput.js.map