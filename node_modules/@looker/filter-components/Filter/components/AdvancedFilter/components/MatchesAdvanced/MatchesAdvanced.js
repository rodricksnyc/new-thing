function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.to-string.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import React from 'react';
import { typeToGrammar } from '@looker/filter-expressions';
import { GroupInput } from '../GroupInput';

var getFilterItemExpression = function getFilterItemExpression(item, type, field) {
  var _typeToGrammar = typeToGrammar(type),
      toString = _typeToGrammar.toString;

  return toString(item, type, field);
};

export var MatchesAdvanced = function MatchesAdvanced(_ref) {
  var item = _ref.item,
      expression = _ref.item.expression,
      onChange = _ref.onChange,
      field = _ref.field,
      filterType = _ref.filterType;

  var expressionChanged = function expressionChanged(event) {
    var newExpression = event.currentTarget.value;
    onChange(item.id, _objectSpread(_objectSpread({}, item), {}, {
      type: 'matchesAdvanced',
      expression: newExpression
    }));
  };

  return React.createElement(GroupInput, {
    type: "text",
    minWidth: "120px",
    value: expression !== null && expression !== void 0 ? expression : getFilterItemExpression(item, filterType, field),
    onChange: expressionChanged,
    placement: "right"
  });
};
//# sourceMappingURL=MatchesAdvanced.js.map