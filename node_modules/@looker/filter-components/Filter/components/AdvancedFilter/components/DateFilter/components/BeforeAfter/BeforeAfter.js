import "core-js/modules/es.number.constructor.js";
import "core-js/modules/es.array.find.js";
import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.array.map.js";
import { dateToFilterDateTimeModel, filterDateTimeModelToDate } from '@looker/filter-expressions';
import React, { useMemo } from 'react';
import { useBeforeOrAfterUnits, useFiscalBeforeOrAfterUnits } from '../../../../../../constants';
import { useTranslation } from '../../../../../../../utils';
import { showFiscalUnits } from '../../../../utils/show_fiscal_units';
import { GroupSelect } from '../../../GroupSelect';
import { DateInput } from '../DateInput';
import { TimeInput } from '../TimeInput';
import { GroupInput } from '../../../GroupInput';
export var BeforeAfter = function BeforeAfter(_ref) {
  var item = _ref.item,
      onChange = _ref.onChange,
      showTime = _ref.showTime,
      field = _ref.field;

  var _useTranslation = useTranslation('BeforeAfter'),
      t = _useTranslation.t;

  var options = [{
    value: 'absolute',
    label: t('absolute')
  }, {
    value: 'relative',
    label: t('relative')
  }];
  var id = item.id,
      range = item.range,
      date = item.date,
      unit = item.unit,
      value = item.value,
      fromnow = item.fromnow;

  var rangeChange = function rangeChange(value) {
    onChange(id, {
      range: value
    });
  };

  var valueChange = function valueChange(e) {
    return onChange(id, {
      value: Number(e.target.value)
    });
  };

  var unitChange = function unitChange(value) {
    var option = unitOptions.find(function (option) {
      return option.value === value;
    });
    onChange(id, {
      unit: option === null || option === void 0 ? void 0 : option.unit,
      fromnow: option === null || option === void 0 ? void 0 : option.fromnow
    });
  };

  var dateChange = function dateChange(newDate) {
    var newDateTimeModel = dateToFilterDateTimeModel(newDate);
    onChange(id, {
      date: newDateTimeModel
    });
  };

  var actualDate = date ? filterDateTimeModelToDate(date) : new Date();
  var selectedValue = fromnow ? "f_".concat(unit) : "".concat(unit);
  var fiscalBeforeOrAfterUnits = useFiscalBeforeOrAfterUnits();
  var beforeOrAfterUnits = useBeforeOrAfterUnits();
  var unitOptions = showFiscalUnits(field) ? fiscalBeforeOrAfterUnits : beforeOrAfterUnits;
  var formattedUnitOptions = useMemo(function () {
    return unitOptions.map(function (_ref2) {
      var label = _ref2.label,
          value = _ref2.value;
      return {
        label: label,
        value: value
      };
    });
  }, [unitOptions]);
  return React.createElement(React.Fragment, null, React.createElement(GroupSelect, {
    placement: "middle",
    value: range,
    options: options,
    onChange: rangeChange
  }), range === 'relative' && React.createElement(React.Fragment, null, selectedValue !== 'now' && React.createElement(GroupInput, {
    onChange: valueChange,
    value: value,
    placement: "middle",
    "data-testid": "number-value"
  }), React.createElement(GroupSelect, {
    placement: "right",
    value: selectedValue,
    options: formattedUnitOptions,
    onChange: unitChange
  })), range === 'absolute' && React.createElement(React.Fragment, null, React.createElement(DateInput, {
    date: actualDate,
    onChange: dateChange,
    placement: showTime ? 'middle' : 'right'
  }), showTime && React.createElement(TimeInput, {
    date: actualDate,
    onChange: dateChange,
    placement: "right"
  })));
};
export default BeforeAfter;
//# sourceMappingURL=BeforeAfter.js.map