import { ChipButton, usePopover, Breakpoint, Dialog, DialogLayout } from '@looker/components';
import React, { useRef } from 'react';
import { useTranslation } from '../../../../../../../utils';
import { useRelativeTimeframeToString } from '../../utils/relative_timeframe_to_string';
import { RelativeTimeframePopoverContent } from './components/RelativeTimeframePopoverContent';
export var RelativeTimeframes = function RelativeTimeframes(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange;
  var internalPopoverInstanceRef = useRef();

  var _useTranslation = useTranslation('RelativeTimeframe'),
      t = _useTranslation.t;

  var handlePresetChange = function handlePresetChange(selected) {
    onChange(selected);
  };

  var handleCustomChange = function handleCustomChange(range) {
    onChange(range);
  };

  var handleNav = function handleNav() {
    var _internalPopoverInsta;

    (_internalPopoverInsta = internalPopoverInstanceRef.current) === null || _internalPopoverInsta === void 0 ? void 0 : _internalPopoverInsta.update();
  };

  var popoverContent = React.createElement(RelativeTimeframePopoverContent, {
    value: value,
    onNav: handleNav,
    onCustomChange: handleCustomChange,
    onPresetChange: handlePresetChange
  });
  var popoverProps = {
    content: popoverContent,
    pin: true,
    placement: 'bottom-start'
  };

  var _usePopover = usePopover(popoverProps),
      popover = _usePopover.popover,
      open = _usePopover.open,
      ref = _usePopover.ref,
      popperInstanceRef = _usePopover.popperInstanceRef;

  internalPopoverInstanceRef.current = popperInstanceRef.current;
  var label = useRelativeTimeframeToString(value);
  var overlayTrigger = React.createElement(ChipButton, {
    ref: ref,
    onClick: open
  }, label);
  return React.createElement(React.Fragment, null, React.createElement(Breakpoint, {
    show: "mobile"
  }, React.createElement(Dialog, {
    content: React.createElement(DialogLayout, {
      header: t('Choose a Timeframe')
    }, popoverContent)
  }, overlayTrigger)), React.createElement(Breakpoint, {
    show: ['tablet', undefined]
  }, popover, overlayTrigger));
};
//# sourceMappingURL=RelativeTimeframes.js.map