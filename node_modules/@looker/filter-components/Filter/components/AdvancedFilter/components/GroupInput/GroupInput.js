var _excluded = ["type", "width"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.string.replace.js";
import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.to-string.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import omit from 'lodash/omit';
import { InputText } from '@looker/components';
import React from 'react';
import styled from 'styled-components';
import { inputPlacementStyle } from '../../../../utils/filter_styles';

var InputLayout = function InputLayout(_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'number' : _ref$type,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? '80px' : _ref$width,
      props = _objectWithoutProperties(_ref, _excluded);

  var inputValidator = function inputValidator(evt) {
    if (evt.target && evt.currentTarget.value) {
      evt.currentTarget.value = evt.currentTarget.value.toString().replace(/\D/g, '');
    }
  };

  return React.createElement(InputText, _extends({
    autoResize: true,
    onInput: inputValidator,
    type: type
  }, omit(props, 'placement')));
};

export var GroupInput = styled(InputLayout).attrs(function (_ref2) {
  var _ref2$placement = _ref2.placement,
      placement = _ref2$placement === void 0 ? 'middle' : _ref2$placement;
  return {
    placement: placement
  };
}).withConfig({
  displayName: "GroupInput",
  componentId: "sc-rdk5zh-0"
})(["", " input{text-align:right;}"], inputPlacementStyle);
//# sourceMappingURL=GroupInput.js.map