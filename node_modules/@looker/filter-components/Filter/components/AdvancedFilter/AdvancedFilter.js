function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import React from 'react';
import { addNode, removeNode, treeToList } from '@looker/filter-expressions';
import { typeToComponent } from '../../utils/type_to_component';
import { SpaceVertical } from '@looker/components';

var getShowOperator = function getShowOperator(length, index) {
  if (index > 0) return true;
  if (length > 1) return 'spacer';
  return false;
};

export var AdvancedFilter = function AdvancedFilter(_ref) {
  var ast = _ref.ast,
      updateAST = _ref.updateAST,
      name = _ref.name,
      onInputChange = _ref.onInputChange,
      changeFilter = _ref.changeFilter,
      suggestions = _ref.suggestions,
      enumerations = _ref.enumerations,
      isLinked = _ref.isLinked,
      expressionType = _ref.expressionType,
      userAttributes = _ref.userAttributes,
      field = _ref.field,
      inline = _ref.inline,
      validationMessage = _ref.validationMessage,
      isLoading = _ref.isLoading,
      allowMultipleValues = _ref.allowMultipleValues;

  var onAdd = function onAdd(filterItem, keepValue) {
    if (ast) {
      var newItem = keepValue ? filterItem : _objectSpread(_objectSpread({}, filterItem), {}, {
        value: []
      });
      updateAST(addNode(ast, newItem));
    }
  };

  var onRemove = function onRemove(id) {
    if (ast) {
      updateAST(removeNode(ast, id));
    }
  };

  var FilterComponent = typeToComponent(expressionType);
  if (!FilterComponent) return null;
  var items = treeToList(ast);
  var lastItemIndex = items.length - 1;
  var filterList = items.map(function (item, itemIndex) {
    var key = "".concat(name, "-").concat(item.id);
    var isMatchesAdvanced = item.type === 'matchesAdvanced';
    var showAdd = itemIndex === lastItemIndex && !isMatchesAdvanced && !(field !== null && field !== void 0 && field.parameter) && Boolean(allowMultipleValues);
    var showRemove = lastItemIndex > 0 && !isMatchesAdvanced;
    return React.createElement(FilterComponent, {
      key: key,
      name: name,
      filterType: expressionType,
      isLinked: isLinked,
      suggestions: suggestions,
      enumerations: enumerations,
      item: item,
      isLoading: isLoading,
      onChange: changeFilter,
      onInputChange: onInputChange,
      onAdd: onAdd,
      onRemove: onRemove,
      showAdd: showAdd,
      showName: itemIndex === 0,
      showRemove: showRemove,
      showOperator: getShowOperator(items.length, itemIndex),
      userAttributes: userAttributes,
      showMatchesAdvanced: items.length === 1,
      field: field,
      inline: inline,
      validationMessage: validationMessage,
      allowMultipleOptions: Boolean(allowMultipleValues)
    });
  });
  return React.createElement(SpaceVertical, null, filterList);
};
//# sourceMappingURL=AdvancedFilter.js.map