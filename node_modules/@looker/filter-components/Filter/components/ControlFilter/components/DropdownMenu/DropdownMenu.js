import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["value", "options", "onChange", "onInputChange", "anyOption", "validationMessage"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { InputText, Select } from '@looker/components';
import React from 'react';
import styled, { css } from 'styled-components';
import { tokenStylePlaceholder } from '../../../../utils/filter_styles';
import { useOptionFiltering } from '../../../../utils/use_option_filtering';
import { usePlaceholder } from '../../../../utils/use_placeholder';

var DropdownMenuComponent = function DropdownMenuComponent(_ref) {
  var value = _ref.value,
      options = _ref.options,
      onChange = _ref.onChange,
      onInputChange = _ref.onInputChange,
      anyOption = _ref.anyOption,
      validationMessage = _ref.validationMessage,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useOptionFiltering = useOptionFiltering({
    value: value,
    options: options,
    onInputChange: onInputChange
  }),
      filteredOptions = _useOptionFiltering.filteredOptions,
      noOptionsLabel = _useOptionFiltering.noOptionsLabel,
      onFilter = _useOptionFiltering.onFilter;

  var placeholderProps = usePlaceholder(value, validationMessage);
  return React.createElement(Select, _extends({}, props, placeholderProps, {
    options: filteredOptions,
    noOptionsLabel: noOptionsLabel,
    isClearable: anyOption,
    value: value,
    onChange: onChange,
    isFilterable: true,
    onFilter: onFilter,
    minWidth: "12rem",
    maxWidth: "20rem",
    autoResize: true,
    listLayout: {
      maxWidth: ['95vw', '90vw', '80vw', '65vw', '50vw'],
      width: 'auto'
    },
    noErrorIcon: true,
    validationType: validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.type
  }));
};

export var DropdownMenu = styled(DropdownMenuComponent).withConfig({
  displayName: "DropdownMenu",
  componentId: "sc-12r3rn4-0"
})(["", "{", " ", "}"], InputText, tokenStylePlaceholder, function (_ref2) {
  var tokenStyle = _ref2.tokenStyle,
      value = _ref2.value;
  return value !== '' && tokenStyle ? css(["background-color:", ";color:", ";&:not(:focus-within){border-color:", ";}"], function (_ref3) {
    var theme = _ref3.theme;
    return theme.colors.keySubtle;
  }, function (_ref4) {
    var theme = _ref4.theme;
    return theme.colors.key;
  }, function (_ref5) {
    var theme = _ref5.theme;
    return theme.colors.ui2;
  }) : '';
});
//# sourceMappingURL=DropdownMenu.js.map