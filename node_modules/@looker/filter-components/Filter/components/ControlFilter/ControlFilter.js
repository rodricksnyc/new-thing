import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["ast", "expressionType", "validationMessage", "dispatchConfigTypeChange"],
    _excluded2 = ["onInputChange"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useEffect } from 'react';
import { getControlFilterInfo, calculateSuggestOptions } from '../../utils';
import { getFilterTokenItem } from '../../utils/get_filter_token_item';
export var ControlFilter = function ControlFilter(_ref) {
  var ast = _ref.ast,
      expressionType = _ref.expressionType,
      validationMessage = _ref.validationMessage,
      _ref$dispatchConfigTy = _ref.dispatchConfigTypeChange,
      dispatchConfigTypeChange = _ref$dispatchConfigTy === void 0 ? false : _ref$dispatchConfigTy,
      adapterProps = _objectWithoutProperties(_ref, _excluded);

  var config = adapterProps.config,
      field = adapterProps.field;

  var _getControlFilterInfo = getControlFilterInfo(getFilterTokenItem(ast, expressionType, config.type), adapterProps),
      Component = _getControlFilterInfo.Component,
      filterTokenProps = _getControlFilterInfo.props;

  useEffect(function () {
    if (dispatchConfigTypeChange) {
      if (filterTokenProps !== null && filterTokenProps !== void 0 && filterTokenProps.date) {
        filterTokenProps === null || filterTokenProps === void 0 ? void 0 : filterTokenProps.onChange(filterTokenProps === null || filterTokenProps === void 0 ? void 0 : filterTokenProps.date);
      } else {
        filterTokenProps === null || filterTokenProps === void 0 ? void 0 : filterTokenProps.onChange(filterTokenProps === null || filterTokenProps === void 0 ? void 0 : filterTokenProps.value);
      }
    }
  }, [config.type]);

  if (!filterTokenProps || !Component) {
    return null;
  }

  var filterTokenInputChange = filterTokenProps.onInputChange,
      restProps = _objectWithoutProperties(filterTokenProps, _excluded2);

  var toggleOptions = calculateSuggestOptions(filterTokenProps);
  return React.createElement(Component, _extends({
    onInputChange: filterTokenInputChange,
    inline: config.display === 'inline',
    validationMessage: validationMessage,
    anyOption: !((field === null || field === void 0 ? void 0 : field.category) === 'parameter')
  }, restProps, {
    options: toggleOptions
  }));
};
//# sourceMappingURL=ControlFilter.js.map