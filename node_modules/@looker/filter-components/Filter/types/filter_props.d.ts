import type { FilterExpressionType, UserAttributeWithValue, FilterASTNode, FilterModel } from '@looker/filter-expressions';
import type { ILookmlModelExploreField } from '@looker/sdk';
import type { Option } from './option';
import type { ValidationMessageProps } from '@looker/components';
export interface FilterChangeProps {
    expression: string;
}
export interface FilterProps {
    type?: string;
    expressionType?: FilterExpressionType;
    config?: any;
    expression: string;
    name: string;
    isLinked?: boolean;
    isLoading?: boolean;
    isRequired?: boolean;
    inline?: boolean;
    onChange?: (value: FilterChangeProps) => void;
    onInputChange?: (value: string) => void;
    loadUserAttributes?: () => void;
    userAttributes?: UserAttributeWithValue[];
    suggestions?: string[];
    enumerations?: Option[] | null;
    field?: ILookmlModelExploreField | null;
    dispatchConfigTypeChange?: boolean;
    skipFilterConfigCheck?: boolean;
    allowMultipleValues?: boolean;
}
export interface InternalFilterProps extends Omit<FilterProps, 'type' | 'expressionType' | 'expression' | 'loadUserAttributes' | 'onChange'> {
    expressionType: FilterExpressionType;
    ast: FilterASTNode | undefined;
    changeFilter: (id: number, newItem: FilterModel) => void;
    validationMessage: ValidationMessageProps;
}
