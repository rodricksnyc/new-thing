var _excluded = ["expression", "type", "expressionType", "loadUserAttributes", "skipFilterConfigCheck"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.to-string.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { getExpressionType, typeToGrammar, hasUserAttributeNode, parseFilterExpression, updateNode } from '@looker/filter-expressions';
import isEmpty from 'lodash/isEmpty';
import React, { useMemo, useRef, useState } from 'react';
import { useFilterConfig, useValidationMessage } from './utils';
import { updateASTFromProps } from './utils/update_ast';
import { isValidFilterType } from './utils/filter_token_type_map';
import { ControlFilter } from './components/ControlFilter';
import { AdvancedFilter } from './components/AdvancedFilter';
export var Filter = function Filter(_ref) {
  var expression = _ref.expression,
      type = _ref.type,
      propsExpressionType = _ref.expressionType,
      loadUserAttributes = _ref.loadUserAttributes,
      skipFilterConfigCheck = _ref.skipFilterConfigCheck,
      props = _objectWithoutProperties(_ref, _excluded);

  var expressionType = useMemo(function () {
    return propsExpressionType || getExpressionType({
      type: type,
      field: props.field || undefined
    });
  }, [propsExpressionType, type, props.field]);
  var validationMessage = useValidationMessage(expression, props.isRequired);

  var getAST = function getAST() {
    return updateASTFromProps(expressionType, expression, props.userAttributes);
  };

  var _useState = useState(getAST),
      _useState2 = _slicedToArray(_useState, 2),
      ast = _useState2[0],
      setAST = _useState2[1];

  var expressionRef = useRef(expression);
  var typeRef = useRef(expressionType);
  var internallyUpdating = useRef(false);

  if (!internallyUpdating.current && (expressionRef.current !== expression || typeRef.current !== expressionType)) {
    setAST(getAST);
    expressionRef.current = expression;
    typeRef.current = expressionType;
  }

  var updateExpression = function updateExpression(newAST) {
    var _typeToGrammar = typeToGrammar(expressionType),
        toString = _typeToGrammar.toString;

    if (newAST.type === 'matchesAdvanced') {
      if (newAST.expression === undefined || newAST.expression === null) {
        return expression;
      } else return newAST.expression;
    } else {
      return toString(newAST, expressionType, props.field || undefined);
    }
  };

  var updateAST = function updateAST(newAST) {
    internallyUpdating.current = true;
    requestAnimationFrame(function () {
      internallyUpdating.current = false;
    });
    setAST(newAST);

    if (newAST) {
      if (loadUserAttributes && isEmpty(props.userAttributes) && hasUserAttributeNode(newAST)) {
        loadUserAttributes();
      } else {
        try {
          var _props$onChange;

          var newExpression = updateExpression(newAST);
          parseFilterExpression(expressionType, newExpression, props.userAttributes);
          expressionRef.current = newExpression;
          (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
            expression: newExpression
          });
        } catch (_ref2) {
          var message = _ref2.message;
        }
      }
    }
  };

  var _useFilterConfig = useFilterConfig({
    ast: ast,
    config: props.config,
    field: props.field,
    suggestions: props.suggestions,
    enumerations: props.enumerations,
    skipFilterConfigCheck: skipFilterConfigCheck
  }),
      config = _useFilterConfig.uiConfig;

  var isControlFilter = config && isValidFilterType(config.type);

  var changeFilter = function changeFilter(id, newItem) {
    if (ast) {
      if (isControlFilter) {
        var _props$onChange2;

        (_props$onChange2 = props.onChange) === null || _props$onChange2 === void 0 ? void 0 : _props$onChange2.call(props, {
          expression: updateExpression(newItem)
        });
      } else {
        var item = newItem.type === 'matchesAdvanced' ? _objectSpread(_objectSpread({}, newItem), {}, {
          expression: newItem.expression === undefined || newItem.expression === null ? expression : newItem.expression
        }) : _objectSpread(_objectSpread({}, newItem), {}, {
          expression: null
        });
        updateAST(updateNode(ast, id, item));
      }
    }
  };

  if (!ast) return null;
  return isControlFilter ? React.createElement(ControlFilter, _extends({}, props, {
    config: config,
    expressionType: expressionType,
    ast: ast,
    changeFilter: changeFilter,
    validationMessage: validationMessage
  })) : React.createElement(AdvancedFilter, _extends({}, props, {
    config: config,
    expressionType: expressionType,
    ast: ast,
    updateAST: updateAST,
    changeFilter: changeFilter,
    validationMessage: validationMessage
  }));
};
//# sourceMappingURL=Filter.js.map