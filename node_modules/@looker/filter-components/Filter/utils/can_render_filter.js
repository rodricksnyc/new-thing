import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
var _excluded = ["config", "field", "suggestions", "enumerations"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { parseFilterExpression } from '@looker/filter-expressions';
import { getControlFilterInfo } from '.';
import noop from 'lodash/noop';
import { FilterUIDisplay, FilterUIType } from '../types/filter_ui_config';
import { isValidFilterType } from './filter_token_type_map';
export var canRenderFilter = function canRenderFilter(_ref) {
  var config = _ref.config,
      field = _ref.field,
      suggestions = _ref.suggestions,
      enumerations = _ref.enumerations,
      filterProps = _objectWithoutProperties(_ref, _excluded);

  if ((config === null || config === void 0 ? void 0 : config.type) === FilterUIType.Advanced) return true;
  if (!isValidFilterType(config === null || config === void 0 ? void 0 : config.type)) return false;
  var ast;

  if ('ast' in filterProps) {
    ast = filterProps.ast;
  } else {
    ast = parseFilterExpression(filterProps.expressionType, filterProps.expression, filterProps.userAttributes);
  }

  var item = _objectSpread(_objectSpread({}, ast), {}, {
    is: true,
    left: null,
    right: null
  });

  var _getControlFilterInfo = getControlFilterInfo(item, {
    config: config,
    suggestions: suggestions,
    enumerations: enumerations,
    field: field,
    changeFilter: noop,
    allowMultipleValues: true
  }),
      props = _getControlFilterInfo.props;

  return Boolean(props);
};
export var getFallbackFilterConfig = function getFallbackFilterConfig(config) {
  return (config === null || config === void 0 ? void 0 : config.type) !== FilterUIType.Advanced && (config === null || config === void 0 ? void 0 : config.display) === FilterUIDisplay.INLINE ? _objectSpread(_objectSpread({}, config), {}, {
    display: FilterUIDisplay.POPOVER,
    type: FilterUIType.Advanced
  }) : _objectSpread(_objectSpread({}, config), {}, {
    type: FilterUIType.Advanced
  });
};
//# sourceMappingURL=can_render_filter.js.map