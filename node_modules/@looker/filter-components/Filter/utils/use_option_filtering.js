var _excluded = ["debouncedFilterTerm"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import "core-js/modules/es.array.find.js";
import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.string.trim.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import { useDebounce } from 'use-debounce';
import { useEffect, useMemo, useRef, useState } from 'react';
import { useTranslation } from '../../utils';
import { createOptions, filterOptions } from './option_utils';

var useExtendedOptions = function useExtendedOptions(options, values, filterTerm, limit, excludeValues) {
  return useMemo(function () {
    var needToAppendValues = !excludeValues && filterTerm === '' && values.length > 0 && options.length >= limit;

    var valueInOptions = function valueInOptions(value) {
      return options.find(function (option) {
        return option.value === value;
      });
    };

    var reducer = function reducer(acc, value) {
      if (!valueInOptions(value)) {
        acc.push(value);
      }

      return acc;
    };

    var valuesToAppend = needToAppendValues ? values.reduce(reducer, []) : [];
    return [].concat(_toConsumableArray(options), _toConsumableArray(createOptions(valuesToAppend)));
  }, [options, values, filterTerm, limit, excludeValues]);
};

export var useDebouncedFilterTerm = function useDebouncedFilterTerm(onInputChange) {
  var _useTranslation = useTranslation('use_option_filtering'),
      t = _useTranslation.t;

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      filterTerm = _useState2[0],
      setFilterTerm = _useState2[1];

  var _useDebounce = useDebounce(filterTerm, 150, {
    leading: true
  }),
      _useDebounce2 = _slicedToArray(_useDebounce, 1),
      debouncedFilterTerm = _useDebounce2[0];

  var isFirstRender = useRef(true);
  useEffect(function () {
    if (!isFirstRender.current) {
      onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(debouncedFilterTerm.trim());
    }

    isFirstRender.current = false;
  }, [debouncedFilterTerm]);
  var noOptionsLabel = filterTerm === '' ? t('No values') : "".concat(t('No values match'), " \"").concat(debouncedFilterTerm, "\"");
  return {
    debouncedFilterTerm: debouncedFilterTerm,
    noOptionsLabel: noOptionsLabel,
    onFilter: setFilterTerm
  };
};
export var useOptionFiltering = function useOptionFiltering(_ref) {
  var excludeValues = _ref.excludeValues,
      _ref$limit = _ref.limit,
      limit = _ref$limit === void 0 ? 999 : _ref$limit,
      onInputChange = _ref.onInputChange,
      options = _ref.options,
      value = _ref.value;
  var values;

  if (typeof value === 'string') {
    if (value === '') {
      values = [];
    } else {
      values = [value];
    }
  } else {
    values = value;
  }

  var _useDebouncedFilterTe = useDebouncedFilterTerm(onInputChange),
      debouncedFilterTerm = _useDebouncedFilterTe.debouncedFilterTerm,
      rest = _objectWithoutProperties(_useDebouncedFilterTe, _excluded);

  var extendedOptions = useExtendedOptions(options, values, debouncedFilterTerm, limit, excludeValues);
  var filteredOptions = useMemo(function () {
    return filterOptions(extendedOptions, debouncedFilterTerm, excludeValues ? values : []);
  }, [extendedOptions, debouncedFilterTerm, values]);
  return _objectSpread({
    filteredOptions: filteredOptions,
    debouncedFilterTerm: debouncedFilterTerm
  }, rest);
};
//# sourceMappingURL=use_option_filtering.js.map