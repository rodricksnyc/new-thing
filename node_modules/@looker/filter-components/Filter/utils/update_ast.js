import { typeToGrammar, parseFilterExpression, getMatchesAdvancedNode, hasMatchesAdvancedNode } from '@looker/filter-expressions';
export var updateASTFromProps = function updateASTFromProps(type, expression, userAttributes) {
  var _typeToGrammar = typeToGrammar(type),
      subTypes = _typeToGrammar.subTypes;

  var ast;

  try {
    ast = parseFilterExpression(type, expression, userAttributes);

    if (hasMatchesAdvancedNode(subTypes)(ast)) {
      ast = getMatchesAdvancedNode(expression, ast);
    }
  } catch (_ref) {
    var message = _ref.message;
    ast = undefined;
  }

  return ast;
};
//# sourceMappingURL=update_ast.js.map