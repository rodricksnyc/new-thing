import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.date.now.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { sanitizeString, sanitizeNumber, sanitizeDate, dateToFilterDateTimeModel, addDays } from '@looker/filter-expressions';
import { filterModelToRelativeTimeframeModel } from '../components/AdvancedFilter/components/DateFilter/utils';
export var getFilterTokenItem = function getFilterTokenItem(root, filterType, configType) {
  var item = _objectSpread({}, root);

  switch (filterType) {
    case 'number':
      item = getNumberFilterTokenItem(item, configType);
      break;

    case 'string':
      item = sanitizeString(_objectSpread(_objectSpread({}, item), {}, {
        type: 'match'
      }));
      break;

    case 'date':
      item = getDateFilterTokenItem(item, configType);
      break;
  }

  return _objectSpread(_objectSpread({}, item), {}, {
    is: true,
    left: null,
    right: null
  });
};

var getNumberFilterTokenItem = function getNumberFilterTokenItem(item, configType) {
  var _item$value;

  var value = [0];

  if ((_item$value = item.value) !== null && _item$value !== void 0 && _item$value.length) {
    value = item.value;
  } else if (item.low) {
    value = [item.low];
  }

  switch (configType) {
    case 'range_slider':
      {
        var _item$value2, _item$low, _item$high;

        var _value = item.value && ((_item$value2 = item.value) === null || _item$value2 === void 0 ? void 0 : _item$value2[0]) || 0;

        return sanitizeNumber(_objectSpread(_objectSpread({}, item), {}, {
          type: 'between',
          low: (_item$low = item.low) !== null && _item$low !== void 0 ? _item$low : _value,
          high: (_item$high = item.high) !== null && _item$high !== void 0 ? _item$high : _value
        }));
      }

    case 'slider':
      return sanitizeNumber(_objectSpread(_objectSpread({}, item), {}, {
        type: '=',
        value: value
      }));

    default:
      return sanitizeNumber(_objectSpread(_objectSpread({}, item), {}, {
        type: '='
      }));
  }
};

var getRelativeTimeframesTokenItem = function getRelativeTimeframesTokenItem(item) {
  if (item.type === 'on') {
    var dateItem = item.date || dateToFilterDateTimeModel(new Date(Date.now()));
    var _item$start = item.start,
        start = _item$start === void 0 ? dateItem : _item$start,
        _item$end = item.end,
        end = _item$end === void 0 ? dateToFilterDateTimeModel(addDays(new Date(Date.now()), 1)) : _item$end;
    return sanitizeDate(_objectSpread(_objectSpread({}, item), {}, {
      type: 'range',
      start: start,
      end: end
    }));
  }

  if (!filterModelToRelativeTimeframeModel(item)) {
    return sanitizeDate(_objectSpread(_objectSpread({}, item), {}, {
      type: 'past',
      unit: 'day',
      value: 7
    }));
  }

  return sanitizeDate(item);
};

var getDateFilterTokenItem = function getDateFilterTokenItem(item, configType) {
  switch (configType) {
    case 'day_picker':
      return sanitizeDate(_objectSpread(_objectSpread({}, item), {}, {
        type: 'on'
      }));

    case 'day_range_picker':
      {
        var dateItem = item.date || dateToFilterDateTimeModel(new Date(Date.now()));
        var _item$start2 = item.start,
            start = _item$start2 === void 0 ? dateItem : _item$start2,
            _item$end2 = item.end,
            end = _item$end2 === void 0 ? dateToFilterDateTimeModel(addDays(new Date(Date.now()), 1)) : _item$end2;
        return sanitizeDate(_objectSpread(_objectSpread({}, item), {}, {
          type: 'range',
          start: start,
          end: end
        }));
      }

    case 'relative_timeframes':
      return getRelativeTimeframesTokenItem(item);

    default:
      return sanitizeDate(item);
  }
};
//# sourceMappingURL=get_filter_token_item.js.map