var _excluded = ["isLoading"],
    _excluded2 = ["isLoading"],
    _excluded3 = ["isLoading"],
    _excluded4 = ["isLoading"];

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.array.includes.js";
import "core-js/modules/es.string.includes.js";
import "core-js/modules/es.number.constructor.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import { addDays, dateToFilterDateTimeModel, filterDateTimeModelToDate } from '@looker/filter-expressions';
import isArray from 'lodash/isArray';
import keyBy from 'lodash/keyBy';
import partition from 'lodash/partition';
import { ButtonToggles } from '../components/ControlFilter/components/ButtonToggles';
import { ButtonGroup } from '../components/ControlFilter/components/ButtonGroup';
import { CheckboxGroup } from '../components/ControlFilter/components/CheckboxGroup';
import { DateInput } from '../components/AdvancedFilter/components/DateFilter/components/DateInput';
import { DateRange } from '../components/AdvancedFilter/components/DateFilter/components/DateRange';
import { DayRangeInput } from '../components/AdvancedFilter/components/DateFilter/components/DayRangeInput';
import { RelativeTimeframes } from '../components/AdvancedFilter/components/DateFilter/components/RelativeTimeframes';
import { filterModelToRelativeTimeframeModel, relativeTimeframeModelToFilterModel } from '../components/AdvancedFilter/components/DateFilter/utils/relative_timeframe_conversions';
import { DropdownMenu } from '../components/ControlFilter/components/DropdownMenu';
import { RadioGroup } from '../components/ControlFilter/components/RadioGroup';
import { RangeSlider, Slider } from '../components/ControlFilter/components/Slider';
import { TagList } from '../components/ControlFilter/components/TagList';
import { createEnumeration, createOptions } from './option_utils';
var filterMaxMap = {
  button_group: 30,
  button_toggles: 30,
  checkboxes: 50,
  radio_buttons: 50
};
export var maxForFilterType = function maxForFilterType(type) {
  return filterMaxMap[type];
};

var getStringOptions = function getStringOptions(_ref) {
  var field = _ref.field,
      suggestions = _ref.suggestions,
      enumerations = _ref.enumerations,
      config = _ref.config;
  var options = config === null || config === void 0 ? void 0 : config.options;
  var escapeEnumerationVaues = (field === null || field === void 0 ? void 0 : field.has_allowed_values) && (field === null || field === void 0 ? void 0 : field.parameter);
  var stringOptions = [];
  var noOptions = !(isArray(options) && options.length > 0);

  if (noOptions && suggestions && suggestions.length !== 0) {
    stringOptions = createOptions(suggestions);
  } else if (noOptions && enumerations) {
    stringOptions = enumerations.map(createEnumeration(escapeEnumerationVaues));
  } else if (isArray(options)) {
    if (enumerations && enumerations.length > 0) {
      stringOptions = enumerations.map(createEnumeration(escapeEnumerationVaues)).filter(function (_ref2) {
        var value = _ref2.value;
        return options.includes(value);
      });
    } else {
      stringOptions = createOptions(options);
    }
  }

  return stringOptions;
};

var getPartitionedOptions = function getPartitionedOptions(item, optionsMap) {
  var valueGroups = isArray(item.value) ? partition(item.value.map(String), function (value) {
    return optionsMap[value];
  }) : [[], []];
  return valueGroups;
};

var getMultiStringSelectChange = function getMultiStringSelectChange(item, changeFilter) {
  return function (value) {
    return changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), {}, {
      value: value
    }));
  };
};

var buttonGroupAdapter = function buttonGroupAdapter(item, _ref3) {
  var isLoading = _ref3.isLoading,
      props = _objectWithoutProperties(_ref3, _excluded);

  var stringOptions = getStringOptions(props);
  var optionsMap = keyBy(stringOptions, 'value');

  var _getPartitionedOption = getPartitionedOptions(item, optionsMap),
      _getPartitionedOption2 = _slicedToArray(_getPartitionedOption, 2),
      included = _getPartitionedOption2[0],
      excluded = _getPartitionedOption2[1];

  var value = included.length ? included : excluded;
  var changeFilter = props.changeFilter;
  return {
    onChange: getMultiStringSelectChange(item, changeFilter),
    value: value,
    options: stringOptions,
    max: maxForFilterType('button_group'),
    isLoading: isLoading
  };
};

var checkboxGroupAdapter = function checkboxGroupAdapter(item, _ref4) {
  var isLoading = _ref4.isLoading,
      props = _objectWithoutProperties(_ref4, _excluded2);

  var adapterProps = buttonGroupAdapter(item, props);
  var onChange = adapterProps.onChange,
      value = adapterProps.value,
      options = adapterProps.options;
  return {
    onChange: onChange,
    value: value,
    options: options,
    max: maxForFilterType('checkboxes'),
    isLoading: isLoading
  };
};

var getSingleValue = function getSingleValue(item, stringOptions, onlyValuesFromOptions, fieldCategory) {
  var optionsMap = keyBy(stringOptions, 'value');
  var singleValue;

  if (onlyValuesFromOptions) {
    var _item$value;

    singleValue = String((_item$value = item.value) !== null && _item$value !== void 0 && _item$value.length && optionsMap[item.value[0]] ? item.value[0] : '');
  } else {
    var _item$value2;

    singleValue = (_item$value2 = item.value) !== null && _item$value2 !== void 0 && _item$value2.length ? String(item.value[0]) : '';
  }

  if (fieldCategory === 'parameter' && singleValue === '' && stringOptions && stringOptions.length) {
    singleValue = stringOptions[0].value;
  }

  return singleValue;
};

var getSingleStringSelectChange = function getSingleStringSelectChange(item, changeFilter) {
  return function (value) {
    changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), {}, {
      value: [value]
    }));
  };
};

var buttonTogglesAdapter = function buttonTogglesAdapter(item, _ref5) {
  var isLoading = _ref5.isLoading,
      props = _objectWithoutProperties(_ref5, _excluded3);

  var changeFilter = props.changeFilter,
      field = props.field;
  var stringOptions = getStringOptions(props);
  var value = getSingleValue(item, stringOptions, true, field === null || field === void 0 ? void 0 : field.category);
  return {
    onChange: getSingleStringSelectChange(item, changeFilter),
    value: value,
    options: stringOptions,
    isLoading: isLoading
  };
};

var relativeTimeframesAdapter = function relativeTimeframesAdapter(item, props) {
  if (item.type === 'range' && (item.start == null || item.end == null)) {
    return undefined;
  }

  var changeFilter = props.changeFilter;
  var relativeTimeframeValue = filterModelToRelativeTimeframeModel(item);

  if (relativeTimeframeValue === undefined) {
    return undefined;
  }

  var relativeTimeframeOnChange = function relativeTimeframeOnChange(relativeTimeframe) {
    var newItem = relativeTimeframeModelToFilterModel(relativeTimeframe);
    changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), newItem));
  };

  return {
    onChange: relativeTimeframeOnChange,
    value: relativeTimeframeValue
  };
};

var dateInputAdapter = function dateInputAdapter(item, props) {
  if (item.date == null) {
    return undefined;
  }

  var changeFilter = props.changeFilter;
  var dateValue = filterDateTimeModelToDate(item.date);

  var dateChange = function dateChange(date) {
    var dateModel = dateToFilterDateTimeModel(date);
    changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), {}, {
      type: 'on',
      date: dateModel
    }));
  };

  return {
    onChange: dateChange,
    date: dateValue
  };
};

var dayRangeInputAdapter = function dayRangeInputAdapter(item, props) {
  if (item.start == null || item.end == null) {
    return undefined;
  }

  var changeFilter = props.changeFilter;
  var dateRangeValue = {
    from: filterDateTimeModelToDate(item.start),
    to: addDays(filterDateTimeModelToDate(item.end), -1)
  };

  var dateRangeChange = function dateRangeChange(_ref6) {
    var from = _ref6.from,
        to = _ref6.to;
    var startDateModel = dateToFilterDateTimeModel(from);
    var translatedTo = addDays(to, 1);
    var endDateModel = dateToFilterDateTimeModel(translatedTo);
    changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), {}, {
      start: startDateModel,
      end: endDateModel,
      type: 'range'
    }));
  };

  return {
    onChange: dateRangeChange,
    value: dateRangeValue
  };
};

var dateRangeAdapter = function dateRangeAdapter(item, props) {
  if (item.start == null || item.end == null) {
    return undefined;
  }

  var dateTimeRangeValue = _objectSpread(_objectSpread({}, item), {}, {
    id: item.id || '',
    start: item.start,
    end: item.end
  });

  var changeFilter = props.changeFilter;

  var dateTimeRangeChange = function dateTimeRangeChange(id, item) {
    var from = item.from,
        to = item.to;
    var startDateModel = dateToFilterDateTimeModel(from);
    var translatedTo = addDays(to, 1);
    var endDateModel = dateToFilterDateTimeModel(translatedTo);
    changeFilter(Number(id), _objectSpread(_objectSpread({}, item), {}, {
      start: startDateModel,
      end: endDateModel,
      type: 'range'
    }));
  };

  return {
    onChange: dateTimeRangeChange,
    item: dateTimeRangeValue,
    showTime: true
  };
};

var sliderAdapter = function sliderAdapter(item, props) {
  var _item$value3;

  if (((_item$value3 = item.value) === null || _item$value3 === void 0 ? void 0 : _item$value3.length) !== 1) {
    return undefined;
  }

  var changeFilter = props.changeFilter,
      config = props.config;
  var sliderValue = item.value[0];

  var sliderChange = function sliderChange(value) {
    changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), {}, {
      type: '=',
      value: [value]
    }));
  };

  return {
    onChange: sliderChange,
    value: sliderValue,
    options: config === null || config === void 0 ? void 0 : config.options
  };
};

var rangeSliderAdapter = function rangeSliderAdapter(item, props) {
  if (item.low == null || item.high == null) {
    return undefined;
  }

  var changeFilter = props.changeFilter,
      config = props.config;
  var rangeSliderValue = {
    min: item.low,
    max: item.high
  };

  var rangeSliderChange = function rangeSliderChange(range) {
    changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), {}, {
      bounds: '[]',
      low: range.min,
      high: range.max,
      type: 'between'
    }));
  };

  return {
    value: rangeSliderValue,
    options: config === null || config === void 0 ? void 0 : config.options,
    onChange: rangeSliderChange
  };
};

var dropdownMenuAdapter = function dropdownMenuAdapter(item, props) {
  var changeFilter = props.changeFilter,
      config = props.config,
      field = props.field,
      isLoading = props.isLoading,
      onInputChange = props.onInputChange;
  var stringOptions = getStringOptions(props);
  var value = getSingleValue(item, stringOptions, false, field === null || field === void 0 ? void 0 : field.category);
  var tokenStyle = (config === null || config === void 0 ? void 0 : config.display) !== 'popover';
  return {
    onChange: getSingleStringSelectChange(item, changeFilter),
    isLoading: isLoading,
    onInputChange: onInputChange,
    value: value,
    options: stringOptions,
    max: maxForFilterType('dropdown_menu'),
    tokenStyle: tokenStyle
  };
};

var tagListAdapter = function tagListAdapter(item, props) {
  var changeFilter = props.changeFilter,
      config = props.config,
      isLoading = props.isLoading,
      onInputChange = props.onInputChange;
  var stringOptions = getStringOptions(props);
  var optionsMap = keyBy(stringOptions, 'value');

  var _getPartitionedOption3 = getPartitionedOptions(item, optionsMap),
      _getPartitionedOption4 = _slicedToArray(_getPartitionedOption3, 2),
      included = _getPartitionedOption4[0],
      excluded = _getPartitionedOption4[1];

  var values = [].concat(_toConsumableArray(included), _toConsumableArray(excluded));
  var tokenStyle = (config === null || config === void 0 ? void 0 : config.display) !== 'popover';
  return {
    onChange: getMultiStringSelectChange(item, changeFilter),
    onInputChange: onInputChange,
    value: values,
    options: stringOptions,
    max: maxForFilterType('tag_list'),
    isLoading: isLoading,
    tokenStyle: tokenStyle
  };
};

var radioGroupAdapter = function radioGroupAdapter(item, _ref7) {
  var isLoading = _ref7.isLoading,
      props = _objectWithoutProperties(_ref7, _excluded4);

  var changeFilter = props.changeFilter,
      field = props.field;
  var stringOptions = getStringOptions(props);
  var value = getSingleValue(item, stringOptions, true, field === null || field === void 0 ? void 0 : field.category);
  return {
    onChange: getSingleStringSelectChange(item, changeFilter),
    value: value,
    options: stringOptions,
    max: maxForFilterType('radio_buttons'),
    isLoading: isLoading
  };
};

export var getControlFilterInfo = function getControlFilterInfo(item, adapterProps) {
  var _ref8 = filterTokenAdapterMap[adapterProps.config.type] || {
    Component: undefined,
    adapter: undefined
  },
      Component = _ref8.Component,
      adapter = _ref8.adapter;

  var props = adapter === null || adapter === void 0 ? void 0 : adapter(item, adapterProps);
  return {
    Component: Component,
    props: props
  };
};
var filterTokenAdapterMap = {
  button_group: {
    Component: ButtonGroup,
    adapter: buttonGroupAdapter
  },
  button_toggles: {
    Component: ButtonToggles,
    adapter: buttonTogglesAdapter
  },
  checkboxes: {
    Component: CheckboxGroup,
    adapter: checkboxGroupAdapter
  },
  date_time_range_input: {
    Component: DateRange,
    adapter: dateRangeAdapter
  },
  day_picker: {
    Component: DateInput,
    adapter: dateInputAdapter
  },
  day_range_picker: {
    Component: DayRangeInput,
    adapter: dayRangeInputAdapter
  },
  dropdown_menu: {
    Component: DropdownMenu,
    adapter: dropdownMenuAdapter
  },
  radio_buttons: {
    Component: RadioGroup,
    adapter: radioGroupAdapter
  },
  range_slider: {
    Component: RangeSlider,
    adapter: rangeSliderAdapter
  },
  relative_timeframes: {
    Component: RelativeTimeframes,
    adapter: relativeTimeframesAdapter
  },
  slider: {
    Component: Slider,
    adapter: sliderAdapter
  },
  tag_list: {
    Component: TagList,
    adapter: tagListAdapter
  }
};
export var TEST_ONLY = {
  getSingleValue: getSingleValue
};
//# sourceMappingURL=control_filter_utils.js.map