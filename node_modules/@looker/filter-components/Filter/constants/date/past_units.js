import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { useTranslation } from '../../../utils';
import { useDateUnits, useFiscalDateUnits } from './date_units';

var useCompleteDateUnits = function useCompleteDateUnits() {
  var _useTranslation = useTranslation('past_units'),
      t = _useTranslation.t;

  return [{
    value: 'c_second',
    unit: 'second',
    label: t('complete seconds'),
    complete: true
  }, {
    value: 'c_minute',
    unit: 'minute',
    label: t('complete minutes'),
    complete: true
  }, {
    value: 'c_hour',
    unit: 'hour',
    label: t('complete hours'),
    complete: true
  }, {
    value: 'c_day',
    unit: 'day',
    label: t('complete days'),
    complete: true
  }, {
    value: 'c_week',
    unit: 'week',
    label: t('complete weeks'),
    complete: true
  }, {
    value: 'c_month',
    unit: 'month',
    label: t('complete months'),
    complete: true
  }, {
    value: 'c_quarter',
    unit: 'quarter',
    label: t('complete quarters'),
    complete: true
  }, {
    value: 'c_year',
    unit: 'year',
    label: t('complete years'),
    complete: true
  }];
};

export var usePastUnits = function usePastUnits() {
  var dateUnits = useDateUnits();
  var completeDateUnits = useCompleteDateUnits();
  return [].concat(_toConsumableArray(dateUnits), _toConsumableArray(completeDateUnits));
};
export var useFiscalPastUnits = function useFiscalPastUnits() {
  var _useTranslation2 = useTranslation('past_units'),
      t = _useTranslation2.t;

  var dateUnits = useDateUnits();
  var fiscalDateUnits = useFiscalDateUnits();
  var completeDateUnits = useCompleteDateUnits();
  return [].concat(_toConsumableArray(dateUnits), _toConsumableArray(fiscalDateUnits), _toConsumableArray(completeDateUnits), [{
    value: 'c_fiscal quarter',
    unit: 'fiscal quarter',
    label: t('complete fiscal quarters'),
    complete: true
  }, {
    value: 'c_fiscal year',
    unit: 'fiscal year',
    label: t('complete fiscal years'),
    complete: true
  }]);
};
//# sourceMappingURL=past_units.js.map