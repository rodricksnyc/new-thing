"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubduedToken = exports.Token = void 0;

var _components = require("@looker/components");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

const _excluded = ["label", "subdued", "maxWidth", "isEmpty", "isHoverTarget", "hasError", "onClick"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const MAX_TOKEN_WIDTH = '20rem';
const Token = (0, _react.forwardRef)((_ref, ref) => {
  let label = _ref.label,
      _ref$subdued = _ref.subdued,
      subdued = _ref$subdued === void 0 ? true : _ref$subdued,
      maxWidth = _ref.maxWidth,
      isEmpty = _ref.isEmpty,
      isHoverTarget = _ref.isHoverTarget,
      hasError = _ref.hasError,
      onClick = _ref.onClick,
      props = _objectWithoutProperties(_ref, _excluded);

  const showError = !props['aria-expanded'] && hasError;
  let TokenComponent;

  if (isHoverTarget) {
    TokenComponent = DropTargetToken;
  } else if (isEmpty) {
    TokenComponent = EmptyToken;
  } else {
    TokenComponent = TokenBase;
  }

  return _react.default.createElement(TokenComponent, {
    showError: showError,
    onClick: onClick,
    maxWidth: maxWidth,
    ref: ref,
    role: "button",
    "aria-selected": !subdued
  }, label);
});
exports.Token = Token;
Token.displayName = 'Token';
const TokenBase = (0, _styledComponents.default)(_components.ChipButton).withConfig({
  displayName: "Token__TokenBase",
  componentId: "sc-194gay4-0"
})(["", " max-width:", ";"], ({
  theme,
  showError
}) => showError && `border: 1px solid ${theme.colors.criticalBorder};`, ({
  maxWidth
}) => maxWidth || MAX_TOKEN_WIDTH);
const DropTargetToken = (0, _styledComponents.default)(TokenBase).withConfig({
  displayName: "Token__DropTargetToken",
  componentId: "sc-194gay4-1"
})(["&:hover{border-color:", ";}"], ({
  theme
}) => theme.colors.key);
const EmptyToken = (0, _styledComponents.default)(TokenBase).withConfig({
  displayName: "Token__EmptyToken",
  componentId: "sc-194gay4-2"
})(["&[aria-selected='false']{background:", ";border:1px dashed ", ";color:", ";}"], ({
  theme
}) => theme.colors.ui1, ({
  theme
}) => theme.colors.ui4, ({
  theme
}) => theme.colors.text1);
const SubduedToken = (0, _styledComponents.default)(TokenBase).withConfig({
  displayName: "Token__SubduedToken",
  componentId: "sc-194gay4-3"
})(["font-weight:normal;&:hover{cursor:not-allowed;}"]);
exports.SubduedToken = SubduedToken;
//# sourceMappingURL=Token.js.map