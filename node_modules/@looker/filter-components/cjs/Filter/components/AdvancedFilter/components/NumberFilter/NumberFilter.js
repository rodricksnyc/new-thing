"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NumberFilter = void 0;

var _filterExpressions = require("@looker/filter-expressions");

var _react = _interopRequireDefault(require("react"));

var _utils = require("../../../../../utils");

var _ItemLayout = require("../ItemLayout");

var _GroupSelect = require("../GroupSelect");

var _number_filter_type_to_filter = require("./utils/number_filter_type_to_filter");

var _utils2 = require("../../utils");

const _excluded = ["item", "filterType", "onChange", "validationMessage", "userAttributes", "showMatchesAdvanced"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const NumberFilter = _ref => {
  var _rest$field, _item$value;

  let item = _ref.item,
      filterType = _ref.filterType,
      onChange = _ref.onChange,
      validationMessage = _ref.validationMessage,
      userAttributes = _ref.userAttributes,
      showMatchesAdvanced = _ref.showMatchesAdvanced,
      rest = _objectWithoutProperties(_ref, _excluded);

  const isParameter = !!((_rest$field = rest.field) !== null && _rest$field !== void 0 && _rest$field.parameter);
  const numberFilterOptions = (0, _utils2.useNumberFilterOptions)(isParameter);
  const options = (0, _utils2.useFilterOptions)(numberFilterOptions, !isParameter && showMatchesAdvanced);

  const typeChange = value => onChange(item.id, (0, _filterExpressions.sanitizeNumber)(_objectSpread(_objectSpread({}, item), (0, _filterExpressions.convertOptionToType)(String(value)))));

  const FilterComponent = (0, _number_filter_type_to_filter.numberFilterTypeToFilter)(item.type, !!rest.allowMultipleOptions, isParameter);
  const selectValue = (0, _filterExpressions.convertTypeToOption)(item);
  const validationText = validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.message;

  const _useTranslation = (0, _utils.useTranslation)('NumberFilter'),
        t = _useTranslation.t;

  const placeholder = validationText || (!(item !== null && item !== void 0 && (_item$value = item.value) !== null && _item$value !== void 0 && _item$value.length) || item.value.length === 0 ? t('any value') : '');
  return _react.default.createElement(_ItemLayout.ItemLayout, _extends({
    item: item
  }, rest), _react.default.createElement(_GroupSelect.GroupSelect, {
    value: selectValue,
    options: options,
    onChange: typeChange,
    validationType: validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.type,
    placement: item.type === 'null' ? undefined : 'left'
  }), _react.default.createElement(FilterComponent, {
    item: item,
    onChange: onChange,
    validationMessage: validationMessage,
    placement: "right",
    userAttributes: userAttributes,
    filterType: filterType,
    placeholder: placeholder
  }));
};

exports.NumberFilter = NumberFilter;
//# sourceMappingURL=NumberFilter.js.map