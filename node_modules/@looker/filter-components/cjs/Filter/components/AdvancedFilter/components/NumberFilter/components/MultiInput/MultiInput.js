"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiInput = exports.MultiInputInternal = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.iterator.js");

var _components = require("@looker/components");

var _react = _interopRequireWildcard(require("react"));

var _filter_styles = require("../../../../../../utils/filter_styles");

var _styledComponents = _interopRequireDefault(require("styled-components"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const validate = value => {
  return value !== '' && !isNaN(Number(value));
};

const MultiInputInternal = ({
  className,
  item,
  onChange,
  width,
  placeholder,
  validationMessage
}) => {
  const ref = (0, _react.useRef)(null);
  const values = item.value.map(String);

  const _useState = (0, _react.useState)(''),
        _useState2 = _slicedToArray(_useState, 2),
        inputValue = _useState2[0],
        setInputValue = _useState2[1];

  const handleChange = newValues => {
    onChange === null || onChange === void 0 ? void 0 : onChange(item.id, {
      value: newValues.map(Number)
    });
  };

  (0, _react.useEffect)(() => {
    return () => {
      if (validate(inputValue) && !document.body.contains(ref.current)) {
        handleChange([...values, inputValue]);
      }
    };
  }, [inputValue, values]);
  return _react.default.createElement(_components.InputChips, {
    ref: ref,
    width: width || _filter_styles.multiInputWidth,
    className: className,
    placeholder: placeholder,
    values: values,
    onChange: handleChange,
    inputValue: inputValue,
    onInputChange: setInputValue,
    validate: validate,
    validationType: validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.type,
    noErrorIcon: true
  });
};

exports.MultiInputInternal = MultiInputInternal;
const MultiInput = (0, _styledComponents.default)(MultiInputInternal).withConfig({
  displayName: "MultiInput",
  componentId: "sc-4quccd-0"
})(["", ""], _filter_styles.inputPlacementStyle);
exports.MultiInput = MultiInput;
//# sourceMappingURL=MultiInput.js.map