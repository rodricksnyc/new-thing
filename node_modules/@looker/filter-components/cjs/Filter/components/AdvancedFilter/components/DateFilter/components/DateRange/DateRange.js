"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateRange = void 0;

var _components = require("@looker/components");

var _filterExpressions = require("@looker/filter-expressions");

var _react = _interopRequireDefault(require("react"));

var _MidInputLabel = require("../../../MidInputLabel");

var _DateInput = require("../DateInput");

var _TimeInput = require("../TimeInput");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DateRange = ({
  item,
  onChange,
  placement,
  showTime
}) => {
  const id = item.id,
        start = item.start,
        end = item.end;
  const startDate = start ? (0, _filterExpressions.filterDateTimeModelToDate)(start) : new Date(Date.now());
  const endDate = end ? (0, _filterExpressions.filterDateTimeModelToDate)(end) : new Date(Date.now());

  const startChange = newStart => {
    if (newStart > endDate) {
      const newEnd = (0, _filterExpressions.addDays)(newStart, 1);
      onChange(id, {
        start: (0, _filterExpressions.dateToFilterDateTimeModel)(newStart),
        end: (0, _filterExpressions.dateToFilterDateTimeModel)(newEnd)
      });
    } else {
      onChange(id, {
        start: (0, _filterExpressions.dateToFilterDateTimeModel)(newStart)
      });
    }
  };

  const endChange = newEnd => {
    if (newEnd < startDate) {
      const newStart = (0, _filterExpressions.addDays)(newEnd, -1);
      onChange(id, {
        start: (0, _filterExpressions.dateToFilterDateTimeModel)(newStart),
        end: (0, _filterExpressions.dateToFilterDateTimeModel)(newEnd)
      });
    } else {
      onChange(id, {
        end: (0, _filterExpressions.dateToFilterDateTimeModel)(newEnd)
      });
    }
  };

  return _react.default.createElement(_components.Flex, null, _react.default.createElement(_DateInput.DateInput, {
    date: startDate,
    onChange: startChange,
    placement: placement === 'right' ? 'middle' : 'left'
  }), showTime && _react.default.createElement(_TimeInput.TimeInput, {
    date: startDate,
    onChange: startChange,
    placement: "middle"
  }), _react.default.createElement(_MidInputLabel.MidInputLabel, null, "until (before)"), _react.default.createElement(_DateInput.DateInput, {
    date: endDate,
    onChange: endChange,
    placement: showTime ? 'middle' : 'right'
  }), showTime && _react.default.createElement(_TimeInput.TimeInput, {
    date: endDate,
    onChange: endChange,
    placement: "right"
  }));
};

exports.DateRange = DateRange;
//# sourceMappingURL=DateRange.js.map