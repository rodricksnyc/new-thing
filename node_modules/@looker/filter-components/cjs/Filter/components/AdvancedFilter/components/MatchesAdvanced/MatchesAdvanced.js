"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatchesAdvanced = void 0;

var _react = _interopRequireDefault(require("react"));

var _filterExpressions = require("@looker/filter-expressions");

var _GroupInput = require("../GroupInput");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const getFilterItemExpression = (item, type, field) => {
  const _typeToGrammar = (0, _filterExpressions.typeToGrammar)(type),
        toString = _typeToGrammar.toString;

  return toString(item, type, field);
};

const MatchesAdvanced = ({
  item,
  item: {
    expression
  },
  onChange,
  field,
  filterType
}) => {
  const expressionChanged = event => {
    const newExpression = event.currentTarget.value;
    onChange(item.id, _objectSpread(_objectSpread({}, item), {}, {
      type: 'matchesAdvanced',
      expression: newExpression
    }));
  };

  return _react.default.createElement(_GroupInput.GroupInput, {
    type: "text",
    minWidth: "120px",
    value: expression !== null && expression !== void 0 ? expression : getFilterItemExpression(item, filterType, field),
    onChange: expressionChanged,
    placement: "right"
  });
};

exports.MatchesAdvanced = MatchesAdvanced;
//# sourceMappingURL=MatchesAdvanced.js.map