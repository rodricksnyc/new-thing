"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TagList = void 0;

var _components = require("@looker/components");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _filter_styles = require("../../../../utils/filter_styles");

var _use_option_filtering = require("../../../../utils/use_option_filtering");

var _use_placeholder = require("../../../../utils/use_placeholder");

const _excluded = ["value", "options", "onChange", "onInputChange", "validationMessage"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const TagListComponent = _ref => {
  let value = _ref.value,
      options = _ref.options,
      onChange = _ref.onChange,
      onInputChange = _ref.onInputChange,
      validationMessage = _ref.validationMessage,
      props = _objectWithoutProperties(_ref, _excluded);

  const _useOptionFiltering = (0, _use_option_filtering.useOptionFiltering)({
    value,
    options,
    onInputChange
  }),
        filteredOptions = _useOptionFiltering.filteredOptions,
        noOptionsLabel = _useOptionFiltering.noOptionsLabel,
        onFilter = _useOptionFiltering.onFilter;

  const handleChange = newValues => {
    onChange(newValues || []);
  };

  const placeholderProps = (0, _use_placeholder.usePlaceholder)(value, validationMessage);
  const resizeHappened = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    if (options.length && !resizeHappened.current) {
      window.dispatchEvent(new Event('resize'));
      resizeHappened.current = true;
    }
  }, [options.length]);
  return _react.default.createElement(_components.SelectMulti, _extends({}, props, placeholderProps, {
    removeOnBackspace: false,
    values: value,
    onChange: handleChange,
    isFilterable: true,
    onFilter: onFilter,
    options: filteredOptions,
    noOptionsLabel: noOptionsLabel,
    width: 410,
    maxWidth: "100%",
    maxHeight: 145,
    listLayout: {
      maxWidth: ['95vw', '90vw', '80vw', '65vw', '50vw'],
      width: 'auto'
    },
    noErrorIcon: true,
    validationType: validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.type
  }));
};

const TagList = (0, _styledComponents.default)(TagListComponent).withConfig({
  displayName: "TagList",
  componentId: "sc-s3oxgm-0"
})(["", "{", "}"], _components.InputText, _filter_styles.tokenStylePlaceholder);
exports.TagList = TagList;
//# sourceMappingURL=TagList.js.map