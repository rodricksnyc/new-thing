"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterOptions = exports.createEnumeration = exports.createOptions = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.string.trim.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.includes.js");

require("core-js/modules/es.string.includes.js");

var _components = require("@looker/components");

const createOption = value => ({
  value,
  label: value
});

const createOptions = values => {
  if (!values) return [];
  const valuesArray = !Array.isArray(values) ? [values] : values;
  return valuesArray.map(value => createOption(value));
};

exports.createOptions = createOptions;

const createEnumeration = (isParameter = false) => e => ({
  label: e.label,
  value: isParameter ? unescapeParameterValue(e.value) : String(e.value)
});

exports.createEnumeration = createEnumeration;

const unescapeParameterValue = value => String(value).replace(/^\^([-])/, '$1').replace(/\^([_%,"'])/g, '$1');

const filterOptions = (options, filterTerm, excludedValues) => {
  if (!excludedValues && (!filterTerm || filterTerm === '')) return options;
  return options.filter(option => filterOption(option, filterTerm || '', excludedValues));
};

exports.filterOptions = filterOptions;

const filterOption = (option, filterTerm, excludedValues) => {
  let matchesFilter = true;

  if (filterTerm !== '') {
    const filterText = filterTerm.trim().toLowerCase();
    const optionText = (0, _components.getComboboxText)(option).trim().toLowerCase();
    matchesFilter = optionText.indexOf(filterText) > -1;
  }

  return excludedValues ? matchesFilter && !excludedValues.includes(option.value) : matchesFilter;
};
//# sourceMappingURL=option_utils.js.map