"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFallbackFilterConfig = exports.canRenderFilter = void 0;

var _filterExpressions = require("@looker/filter-expressions");

var _ = require(".");

var _noop = _interopRequireDefault(require("lodash/noop"));

var _filter_ui_config = require("../types/filter_ui_config");

var _filter_token_type_map = require("./filter_token_type_map");

const _excluded = ["config", "field", "suggestions", "enumerations"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const canRenderFilter = _ref => {
  let config = _ref.config,
      field = _ref.field,
      suggestions = _ref.suggestions,
      enumerations = _ref.enumerations,
      filterProps = _objectWithoutProperties(_ref, _excluded);

  if ((config === null || config === void 0 ? void 0 : config.type) === _filter_ui_config.FilterUIType.Advanced) return true;
  if (!(0, _filter_token_type_map.isValidFilterType)(config === null || config === void 0 ? void 0 : config.type)) return false;
  let ast;

  if ('ast' in filterProps) {
    ast = filterProps.ast;
  } else {
    ast = (0, _filterExpressions.parseFilterExpression)(filterProps.expressionType, filterProps.expression, filterProps.userAttributes);
  }

  const item = _objectSpread(_objectSpread({}, ast), {}, {
    is: true,
    left: null,
    right: null
  });

  const _getControlFilterInfo = (0, _.getControlFilterInfo)(item, {
    config,
    suggestions,
    enumerations,
    field,
    changeFilter: _noop.default,
    allowMultipleValues: true
  }),
        props = _getControlFilterInfo.props;

  return Boolean(props);
};

exports.canRenderFilter = canRenderFilter;

const getFallbackFilterConfig = config => (config === null || config === void 0 ? void 0 : config.type) !== _filter_ui_config.FilterUIType.Advanced && (config === null || config === void 0 ? void 0 : config.display) === _filter_ui_config.FilterUIDisplay.INLINE ? _objectSpread(_objectSpread({}, config), {}, {
  display: _filter_ui_config.FilterUIDisplay.POPOVER,
  type: _filter_ui_config.FilterUIType.Advanced
}) : _objectSpread(_objectSpread({}, config), {}, {
  type: _filter_ui_config.FilterUIType.Advanced
});

exports.getFallbackFilterConfig = getFallbackFilterConfig;
//# sourceMappingURL=can_render_filter.js.map