"use strict";

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TEST_ONLY = exports.getControlFilterInfo = exports.maxForFilterType = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.includes.js");

require("core-js/modules/es.string.includes.js");

require("core-js/modules/es.array.iterator.js");

var _filterExpressions = require("@looker/filter-expressions");

var _isArray = _interopRequireDefault(require("lodash/isArray"));

var _keyBy = _interopRequireDefault(require("lodash/keyBy"));

var _partition = _interopRequireDefault(require("lodash/partition"));

var _ButtonToggles = require("../components/ControlFilter/components/ButtonToggles");

var _ButtonGroup = require("../components/ControlFilter/components/ButtonGroup");

var _CheckboxGroup = require("../components/ControlFilter/components/CheckboxGroup");

var _DateInput = require("../components/AdvancedFilter/components/DateFilter/components/DateInput");

var _DateRange = require("../components/AdvancedFilter/components/DateFilter/components/DateRange");

var _DayRangeInput = require("../components/AdvancedFilter/components/DateFilter/components/DayRangeInput");

var _RelativeTimeframes = require("../components/AdvancedFilter/components/DateFilter/components/RelativeTimeframes");

var _relative_timeframe_conversions = require("../components/AdvancedFilter/components/DateFilter/utils/relative_timeframe_conversions");

var _DropdownMenu = require("../components/ControlFilter/components/DropdownMenu");

var _RadioGroup = require("../components/ControlFilter/components/RadioGroup");

var _Slider = require("../components/ControlFilter/components/Slider");

var _TagList = require("../components/ControlFilter/components/TagList");

var _option_utils = require("./option_utils");

const _excluded = ["isLoading"],
      _excluded2 = ["isLoading"],
      _excluded3 = ["isLoading"],
      _excluded4 = ["isLoading"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const filterMaxMap = {
  button_group: 30,
  button_toggles: 30,
  checkboxes: 50,
  radio_buttons: 50
};

const maxForFilterType = type => filterMaxMap[type];

exports.maxForFilterType = maxForFilterType;

const getStringOptions = ({
  field,
  suggestions,
  enumerations,
  config
}) => {
  const options = config === null || config === void 0 ? void 0 : config.options;
  const escapeEnumerationVaues = (field === null || field === void 0 ? void 0 : field.has_allowed_values) && (field === null || field === void 0 ? void 0 : field.parameter);
  let stringOptions = [];
  const noOptions = !((0, _isArray.default)(options) && options.length > 0);

  if (noOptions && suggestions && suggestions.length !== 0) {
    stringOptions = (0, _option_utils.createOptions)(suggestions);
  } else if (noOptions && enumerations) {
    stringOptions = enumerations.map((0, _option_utils.createEnumeration)(escapeEnumerationVaues));
  } else if ((0, _isArray.default)(options)) {
    if (enumerations && enumerations.length > 0) {
      stringOptions = enumerations.map((0, _option_utils.createEnumeration)(escapeEnumerationVaues)).filter(({
        value
      }) => options.includes(value));
    } else {
      stringOptions = (0, _option_utils.createOptions)(options);
    }
  }

  return stringOptions;
};

const getPartitionedOptions = (item, optionsMap) => {
  const valueGroups = (0, _isArray.default)(item.value) ? (0, _partition.default)(item.value.map(String), value => optionsMap[value]) : [[], []];
  return valueGroups;
};

const getMultiStringSelectChange = (item, changeFilter) => value => changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), {}, {
  value
}));

const buttonGroupAdapter = (item, _ref) => {
  let isLoading = _ref.isLoading,
      props = _objectWithoutProperties(_ref, _excluded);

  const stringOptions = getStringOptions(props);
  const optionsMap = (0, _keyBy.default)(stringOptions, 'value');

  const _getPartitionedOption = getPartitionedOptions(item, optionsMap),
        _getPartitionedOption2 = _slicedToArray(_getPartitionedOption, 2),
        included = _getPartitionedOption2[0],
        excluded = _getPartitionedOption2[1];

  const value = included.length ? included : excluded;
  const changeFilter = props.changeFilter;
  return {
    onChange: getMultiStringSelectChange(item, changeFilter),
    value,
    options: stringOptions,
    max: maxForFilterType('button_group'),
    isLoading
  };
};

const checkboxGroupAdapter = (item, _ref2) => {
  let isLoading = _ref2.isLoading,
      props = _objectWithoutProperties(_ref2, _excluded2);

  const adapterProps = buttonGroupAdapter(item, props);
  const onChange = adapterProps.onChange,
        value = adapterProps.value,
        options = adapterProps.options;
  return {
    onChange,
    value,
    options,
    max: maxForFilterType('checkboxes'),
    isLoading
  };
};

const getSingleValue = (item, stringOptions, onlyValuesFromOptions, fieldCategory) => {
  const optionsMap = (0, _keyBy.default)(stringOptions, 'value');
  let singleValue;

  if (onlyValuesFromOptions) {
    var _item$value;

    singleValue = String((_item$value = item.value) !== null && _item$value !== void 0 && _item$value.length && optionsMap[item.value[0]] ? item.value[0] : '');
  } else {
    var _item$value2;

    singleValue = (_item$value2 = item.value) !== null && _item$value2 !== void 0 && _item$value2.length ? String(item.value[0]) : '';
  }

  if (fieldCategory === 'parameter' && singleValue === '' && stringOptions && stringOptions.length) {
    singleValue = stringOptions[0].value;
  }

  return singleValue;
};

const getSingleStringSelectChange = (item, changeFilter) => value => {
  changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), {}, {
    value: [value]
  }));
};

const buttonTogglesAdapter = (item, _ref3) => {
  let isLoading = _ref3.isLoading,
      props = _objectWithoutProperties(_ref3, _excluded3);

  const changeFilter = props.changeFilter,
        field = props.field;
  const stringOptions = getStringOptions(props);
  const value = getSingleValue(item, stringOptions, true, field === null || field === void 0 ? void 0 : field.category);
  return {
    onChange: getSingleStringSelectChange(item, changeFilter),
    value,
    options: stringOptions,
    isLoading
  };
};

const relativeTimeframesAdapter = (item, props) => {
  if (item.type === 'range' && (item.start == null || item.end == null)) {
    return undefined;
  }

  const changeFilter = props.changeFilter;
  const relativeTimeframeValue = (0, _relative_timeframe_conversions.filterModelToRelativeTimeframeModel)(item);

  if (relativeTimeframeValue === undefined) {
    return undefined;
  }

  const relativeTimeframeOnChange = relativeTimeframe => {
    const newItem = (0, _relative_timeframe_conversions.relativeTimeframeModelToFilterModel)(relativeTimeframe);
    changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), newItem));
  };

  return {
    onChange: relativeTimeframeOnChange,
    value: relativeTimeframeValue
  };
};

const dateInputAdapter = (item, props) => {
  if (item.date == null) {
    return undefined;
  }

  const changeFilter = props.changeFilter;
  const dateValue = (0, _filterExpressions.filterDateTimeModelToDate)(item.date);

  const dateChange = date => {
    const dateModel = (0, _filterExpressions.dateToFilterDateTimeModel)(date);
    changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), {}, {
      type: 'on',
      date: dateModel
    }));
  };

  return {
    onChange: dateChange,
    date: dateValue
  };
};

const dayRangeInputAdapter = (item, props) => {
  if (item.start == null || item.end == null) {
    return undefined;
  }

  const changeFilter = props.changeFilter;
  const dateRangeValue = {
    from: (0, _filterExpressions.filterDateTimeModelToDate)(item.start),
    to: (0, _filterExpressions.addDays)((0, _filterExpressions.filterDateTimeModelToDate)(item.end), -1)
  };

  const dateRangeChange = ({
    from,
    to
  }) => {
    const startDateModel = (0, _filterExpressions.dateToFilterDateTimeModel)(from);
    const translatedTo = (0, _filterExpressions.addDays)(to, 1);
    const endDateModel = (0, _filterExpressions.dateToFilterDateTimeModel)(translatedTo);
    changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), {}, {
      start: startDateModel,
      end: endDateModel,
      type: 'range'
    }));
  };

  return {
    onChange: dateRangeChange,
    value: dateRangeValue
  };
};

const dateRangeAdapter = (item, props) => {
  if (item.start == null || item.end == null) {
    return undefined;
  }

  const dateTimeRangeValue = _objectSpread(_objectSpread({}, item), {}, {
    id: item.id || '',
    start: item.start,
    end: item.end
  });

  const changeFilter = props.changeFilter;

  const dateTimeRangeChange = (id, item) => {
    const from = item.from,
          to = item.to;
    const startDateModel = (0, _filterExpressions.dateToFilterDateTimeModel)(from);
    const translatedTo = (0, _filterExpressions.addDays)(to, 1);
    const endDateModel = (0, _filterExpressions.dateToFilterDateTimeModel)(translatedTo);
    changeFilter(Number(id), _objectSpread(_objectSpread({}, item), {}, {
      start: startDateModel,
      end: endDateModel,
      type: 'range'
    }));
  };

  return {
    onChange: dateTimeRangeChange,
    item: dateTimeRangeValue,
    showTime: true
  };
};

const sliderAdapter = (item, props) => {
  var _item$value3;

  if (((_item$value3 = item.value) === null || _item$value3 === void 0 ? void 0 : _item$value3.length) !== 1) {
    return undefined;
  }

  const changeFilter = props.changeFilter,
        config = props.config;
  const sliderValue = item.value[0];

  const sliderChange = value => {
    changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), {}, {
      type: '=',
      value: [value]
    }));
  };

  return {
    onChange: sliderChange,
    value: sliderValue,
    options: config === null || config === void 0 ? void 0 : config.options
  };
};

const rangeSliderAdapter = (item, props) => {
  if (item.low == null || item.high == null) {
    return undefined;
  }

  const changeFilter = props.changeFilter,
        config = props.config;
  const rangeSliderValue = {
    min: item.low,
    max: item.high
  };

  const rangeSliderChange = range => {
    changeFilter(Number(item.id), _objectSpread(_objectSpread({}, item), {}, {
      bounds: '[]',
      low: range.min,
      high: range.max,
      type: 'between'
    }));
  };

  return {
    value: rangeSliderValue,
    options: config === null || config === void 0 ? void 0 : config.options,
    onChange: rangeSliderChange
  };
};

const dropdownMenuAdapter = (item, props) => {
  const changeFilter = props.changeFilter,
        config = props.config,
        field = props.field,
        isLoading = props.isLoading,
        onInputChange = props.onInputChange;
  const stringOptions = getStringOptions(props);
  const value = getSingleValue(item, stringOptions, false, field === null || field === void 0 ? void 0 : field.category);
  const tokenStyle = (config === null || config === void 0 ? void 0 : config.display) !== 'popover';
  return {
    onChange: getSingleStringSelectChange(item, changeFilter),
    isLoading,
    onInputChange,
    value,
    options: stringOptions,
    max: maxForFilterType('dropdown_menu'),
    tokenStyle
  };
};

const tagListAdapter = (item, props) => {
  const changeFilter = props.changeFilter,
        config = props.config,
        isLoading = props.isLoading,
        onInputChange = props.onInputChange;
  const stringOptions = getStringOptions(props);
  const optionsMap = (0, _keyBy.default)(stringOptions, 'value');

  const _getPartitionedOption3 = getPartitionedOptions(item, optionsMap),
        _getPartitionedOption4 = _slicedToArray(_getPartitionedOption3, 2),
        included = _getPartitionedOption4[0],
        excluded = _getPartitionedOption4[1];

  const values = [...included, ...excluded];
  const tokenStyle = (config === null || config === void 0 ? void 0 : config.display) !== 'popover';
  return {
    onChange: getMultiStringSelectChange(item, changeFilter),
    onInputChange,
    value: values,
    options: stringOptions,
    max: maxForFilterType('tag_list'),
    isLoading,
    tokenStyle
  };
};

const radioGroupAdapter = (item, _ref4) => {
  let isLoading = _ref4.isLoading,
      props = _objectWithoutProperties(_ref4, _excluded4);

  const changeFilter = props.changeFilter,
        field = props.field;
  const stringOptions = getStringOptions(props);
  const value = getSingleValue(item, stringOptions, true, field === null || field === void 0 ? void 0 : field.category);
  return {
    onChange: getSingleStringSelectChange(item, changeFilter),
    value,
    options: stringOptions,
    max: maxForFilterType('radio_buttons'),
    isLoading
  };
};

const getControlFilterInfo = (item, adapterProps) => {
  const _ref5 = filterTokenAdapterMap[adapterProps.config.type] || {
    Component: undefined,
    adapter: undefined
  },
        Component = _ref5.Component,
        adapter = _ref5.adapter;

  const props = adapter === null || adapter === void 0 ? void 0 : adapter(item, adapterProps);
  return {
    Component,
    props
  };
};

exports.getControlFilterInfo = getControlFilterInfo;
const filterTokenAdapterMap = {
  button_group: {
    Component: _ButtonGroup.ButtonGroup,
    adapter: buttonGroupAdapter
  },
  button_toggles: {
    Component: _ButtonToggles.ButtonToggles,
    adapter: buttonTogglesAdapter
  },
  checkboxes: {
    Component: _CheckboxGroup.CheckboxGroup,
    adapter: checkboxGroupAdapter
  },
  date_time_range_input: {
    Component: _DateRange.DateRange,
    adapter: dateRangeAdapter
  },
  day_picker: {
    Component: _DateInput.DateInput,
    adapter: dateInputAdapter
  },
  day_range_picker: {
    Component: _DayRangeInput.DayRangeInput,
    adapter: dayRangeInputAdapter
  },
  dropdown_menu: {
    Component: _DropdownMenu.DropdownMenu,
    adapter: dropdownMenuAdapter
  },
  radio_buttons: {
    Component: _RadioGroup.RadioGroup,
    adapter: radioGroupAdapter
  },
  range_slider: {
    Component: _Slider.RangeSlider,
    adapter: rangeSliderAdapter
  },
  relative_timeframes: {
    Component: _RelativeTimeframes.RelativeTimeframes,
    adapter: relativeTimeframesAdapter
  },
  slider: {
    Component: _Slider.Slider,
    adapter: sliderAdapter
  },
  tag_list: {
    Component: _TagList.TagList,
    adapter: tagListAdapter
  }
};
const TEST_ONLY = {
  getSingleValue
};
exports.TEST_ONLY = TEST_ONLY;
//# sourceMappingURL=control_filter_utils.js.map