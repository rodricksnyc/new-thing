"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOptionFiltering = exports.useDebouncedFilterTerm = void 0;

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.string.trim.js");

var _useDebounce3 = require("use-debounce");

var _react = require("react");

var _utils = require("../../utils");

var _option_utils = require("./option_utils");

const _excluded = ["debouncedFilterTerm"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const useExtendedOptions = (options, values, filterTerm, limit, excludeValues) => {
  return (0, _react.useMemo)(() => {
    const needToAppendValues = !excludeValues && filterTerm === '' && values.length > 0 && options.length >= limit;

    const valueInOptions = value => options.find(option => option.value === value);

    const reducer = (acc, value) => {
      if (!valueInOptions(value)) {
        acc.push(value);
      }

      return acc;
    };

    const valuesToAppend = needToAppendValues ? values.reduce(reducer, []) : [];
    return [...options, ...(0, _option_utils.createOptions)(valuesToAppend)];
  }, [options, values, filterTerm, limit, excludeValues]);
};

const useDebouncedFilterTerm = onInputChange => {
  const _useTranslation = (0, _utils.useTranslation)('use_option_filtering'),
        t = _useTranslation.t;

  const _useState = (0, _react.useState)(''),
        _useState2 = _slicedToArray(_useState, 2),
        filterTerm = _useState2[0],
        setFilterTerm = _useState2[1];

  const _useDebounce = (0, _useDebounce3.useDebounce)(filterTerm, 150, {
    leading: true
  }),
        _useDebounce2 = _slicedToArray(_useDebounce, 1),
        debouncedFilterTerm = _useDebounce2[0];

  const isFirstRender = (0, _react.useRef)(true);
  (0, _react.useEffect)(() => {
    if (!isFirstRender.current) {
      onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(debouncedFilterTerm.trim());
    }

    isFirstRender.current = false;
  }, [debouncedFilterTerm]);
  const noOptionsLabel = filterTerm === '' ? t('No values') : `${t('No values match')} "${debouncedFilterTerm}"`;
  return {
    debouncedFilterTerm,
    noOptionsLabel,
    onFilter: setFilterTerm
  };
};

exports.useDebouncedFilterTerm = useDebouncedFilterTerm;

const useOptionFiltering = ({
  excludeValues,
  limit = 999,
  onInputChange,
  options,
  value
}) => {
  let values;

  if (typeof value === 'string') {
    if (value === '') {
      values = [];
    } else {
      values = [value];
    }
  } else {
    values = value;
  }

  const _useDebouncedFilterTe = useDebouncedFilterTerm(onInputChange),
        debouncedFilterTerm = _useDebouncedFilterTe.debouncedFilterTerm,
        rest = _objectWithoutProperties(_useDebouncedFilterTe, _excluded);

  const extendedOptions = useExtendedOptions(options, values, debouncedFilterTerm, limit, excludeValues);
  const filteredOptions = (0, _react.useMemo)(() => {
    return (0, _option_utils.filterOptions)(extendedOptions, debouncedFilterTerm, excludeValues ? values : []);
  }, [extendedOptions, debouncedFilterTerm, values]);
  return _objectSpread({
    filteredOptions,
    debouncedFilterTerm
  }, rest);
};

exports.useOptionFiltering = useOptionFiltering;
//# sourceMappingURL=use_option_filtering.js.map