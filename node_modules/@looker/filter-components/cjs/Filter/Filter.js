"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Filter = void 0;

var _filterExpressions = require("@looker/filter-expressions");

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

var _react = _interopRequireWildcard(require("react"));

var _utils = require("./utils");

var _update_ast = require("./utils/update_ast");

var _filter_token_type_map = require("./utils/filter_token_type_map");

var _ControlFilter = require("./components/ControlFilter");

var _AdvancedFilter = require("./components/AdvancedFilter");

const _excluded = ["expression", "type", "expressionType", "loadUserAttributes", "skipFilterConfigCheck"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const Filter = _ref => {
  let expression = _ref.expression,
      type = _ref.type,
      propsExpressionType = _ref.expressionType,
      loadUserAttributes = _ref.loadUserAttributes,
      skipFilterConfigCheck = _ref.skipFilterConfigCheck,
      props = _objectWithoutProperties(_ref, _excluded);

  const expressionType = (0, _react.useMemo)(() => {
    return propsExpressionType || (0, _filterExpressions.getExpressionType)({
      type,
      field: props.field || undefined
    });
  }, [propsExpressionType, type, props.field]);
  const validationMessage = (0, _utils.useValidationMessage)(expression, props.isRequired);

  const getAST = () => (0, _update_ast.updateASTFromProps)(expressionType, expression, props.userAttributes);

  const _useState = (0, _react.useState)(getAST),
        _useState2 = _slicedToArray(_useState, 2),
        ast = _useState2[0],
        setAST = _useState2[1];

  const expressionRef = (0, _react.useRef)(expression);
  const typeRef = (0, _react.useRef)(expressionType);
  const internallyUpdating = (0, _react.useRef)(false);

  if (!internallyUpdating.current && (expressionRef.current !== expression || typeRef.current !== expressionType)) {
    setAST(getAST);
    expressionRef.current = expression;
    typeRef.current = expressionType;
  }

  const updateExpression = newAST => {
    const _typeToGrammar = (0, _filterExpressions.typeToGrammar)(expressionType),
          toString = _typeToGrammar.toString;

    if (newAST.type === 'matchesAdvanced') {
      if (newAST.expression === undefined || newAST.expression === null) {
        return expression;
      } else return newAST.expression;
    } else {
      return toString(newAST, expressionType, props.field || undefined);
    }
  };

  const updateAST = newAST => {
    internallyUpdating.current = true;
    requestAnimationFrame(() => {
      internallyUpdating.current = false;
    });
    setAST(newAST);

    if (newAST) {
      if (loadUserAttributes && (0, _isEmpty.default)(props.userAttributes) && (0, _filterExpressions.hasUserAttributeNode)(newAST)) {
        loadUserAttributes();
      } else {
        try {
          var _props$onChange;

          const newExpression = updateExpression(newAST);
          (0, _filterExpressions.parseFilterExpression)(expressionType, newExpression, props.userAttributes);
          expressionRef.current = newExpression;
          (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
            expression: newExpression
          });
        } catch (_ref2) {
          let message = _ref2.message;
        }
      }
    }
  };

  const _useFilterConfig = (0, _utils.useFilterConfig)({
    ast: ast,
    config: props.config,
    field: props.field,
    suggestions: props.suggestions,
    enumerations: props.enumerations,
    skipFilterConfigCheck
  }),
        config = _useFilterConfig.uiConfig;

  const isControlFilter = config && (0, _filter_token_type_map.isValidFilterType)(config.type);

  const changeFilter = (id, newItem) => {
    if (ast) {
      if (isControlFilter) {
        var _props$onChange2;

        (_props$onChange2 = props.onChange) === null || _props$onChange2 === void 0 ? void 0 : _props$onChange2.call(props, {
          expression: updateExpression(newItem)
        });
      } else {
        const item = newItem.type === 'matchesAdvanced' ? _objectSpread(_objectSpread({}, newItem), {}, {
          expression: newItem.expression === undefined || newItem.expression === null ? expression : newItem.expression
        }) : _objectSpread(_objectSpread({}, newItem), {}, {
          expression: null
        });
        updateAST((0, _filterExpressions.updateNode)(ast, id, item));
      }
    }
  };

  if (!ast) return null;
  return isControlFilter ? _react.default.createElement(_ControlFilter.ControlFilter, _extends({}, props, {
    config: config,
    expressionType: expressionType,
    ast: ast,
    changeFilter: changeFilter,
    validationMessage: validationMessage
  })) : _react.default.createElement(_AdvancedFilter.AdvancedFilter, _extends({}, props, {
    config: config,
    expressionType: expressionType,
    ast: ast,
    updateAST: updateAST,
    changeFilter: changeFilter,
    validationMessage: validationMessage
  }));
};

exports.Filter = Filter;
//# sourceMappingURL=Filter.js.map