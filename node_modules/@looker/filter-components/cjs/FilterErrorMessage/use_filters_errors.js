"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFiltersErrors = void 0;

var _some = _interopRequireDefault(require("lodash/some"));

var _filterExpressions = require("@looker/filter-expressions");

var _utils = require("../utils");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const useFiltersErrors = (filters, options = {
  userAttributes: [],
  useLongMessageForm: false
}) => {
  const _useTranslation = (0, _utils.useTranslation)('use_filters_errors'),
        t = _useTranslation.t;

  let result = {};
  (0, _some.default)(filters, filter => {
    if (filter.isRequired && !filter.expression) {
      result = {
        type: _constants.ERROR_TYPE,
        message: t('Selection required')
      };
      return true;
    }

    if (hasAtLeastOneMissingUserAttributeValue(filter, options === null || options === void 0 ? void 0 : options.userAttributes)) {
      const message = options !== null && options !== void 0 && options.useLongMessageForm ? t('No value is set for your user attribute') : t('Invalid value');
      result = {
        type: _constants.ERROR_TYPE,
        message
      };
      return true;
    }

    return false;
  });
  return result;
};

exports.useFiltersErrors = useFiltersErrors;

const hasAtLeastOneMissingUserAttributeValue = (filter, userAttributes) => {
  const expressionType = filter.expressionType || (0, _filterExpressions.getExpressionType)({
    type: filter.type,
    field: filter.field || undefined
  });
  const attribute = (0, _filterExpressions.getUserAttributeMatchingTypeAndExpression)(expressionType, filter.expression, userAttributes);
  return !!attribute && !attribute.value;
};
//# sourceMappingURL=use_filters_errors.js.map