"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.i18nInit = i18nInit;

require("core-js/modules/es.promise.js");

var _i18n = require("@looker/i18n");

var _merge = _interopRequireDefault(require("lodash/merge"));

var _locales = require("../locales");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function i18nInit() {
  return _i18nInit.apply(this, arguments);
}

function _i18nInit() {
  _i18nInit = _asyncToGenerator(function* ({
    locale = 'en',
    resources,
    dateLocale
  } = _locales.en) {
    const mergedResources = (0, _merge.default)({}, resources, _locales.en.resources);
    return (0, _i18n.i18nInitComponents)({
      dateLocale,
      locale,
      resources: mergedResources
    });
  });
  return _i18nInit.apply(this, arguments);
}
//# sourceMappingURL=i18n.js.map