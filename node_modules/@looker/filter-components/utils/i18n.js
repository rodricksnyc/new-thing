import "regenerator-runtime/runtime.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.promise.js";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { i18nInitComponents } from '@looker/i18n';
import merge from 'lodash/merge';
import { en } from '../locales';
export function i18nInit() {
  return _i18nInit.apply(this, arguments);
}

function _i18nInit() {
  _i18nInit = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var _ref,
        _ref$locale,
        locale,
        resources,
        dateLocale,
        mergedResources,
        _args = arguments;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref = _args.length > 0 && _args[0] !== undefined ? _args[0] : en, _ref$locale = _ref.locale, locale = _ref$locale === void 0 ? 'en' : _ref$locale, resources = _ref.resources, dateLocale = _ref.dateLocale;
            mergedResources = merge({}, resources, en.resources);
            return _context.abrupt("return", i18nInitComponents({
              dateLocale: dateLocale,
              locale: locale,
              resources: mergedResources
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _i18nInit.apply(this, arguments);
}
//# sourceMappingURL=i18n.js.map