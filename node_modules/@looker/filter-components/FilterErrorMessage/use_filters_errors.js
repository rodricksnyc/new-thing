import some from 'lodash/some';
import { getExpressionType, getUserAttributeMatchingTypeAndExpression } from '@looker/filter-expressions';
import { useTranslation } from '../utils';
import { ERROR_TYPE } from '../constants';
export var useFiltersErrors = function useFiltersErrors(filters) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    userAttributes: [],
    useLongMessageForm: false
  };

  var _useTranslation = useTranslation('use_filters_errors'),
      t = _useTranslation.t;

  var result = {};
  some(filters, function (filter) {
    if (filter.isRequired && !filter.expression) {
      result = {
        type: ERROR_TYPE,
        message: t('Selection required')
      };
      return true;
    }

    if (hasAtLeastOneMissingUserAttributeValue(filter, options === null || options === void 0 ? void 0 : options.userAttributes)) {
      var message = options !== null && options !== void 0 && options.useLongMessageForm ? t('No value is set for your user attribute') : t('Invalid value');
      result = {
        type: ERROR_TYPE,
        message: message
      };
      return true;
    }

    return false;
  });
  return result;
};

var hasAtLeastOneMissingUserAttributeValue = function hasAtLeastOneMissingUserAttributeValue(filter, userAttributes) {
  var expressionType = filter.expressionType || getExpressionType({
    type: filter.type,
    field: filter.field || undefined
  });
  var attribute = getUserAttributeMatchingTypeAndExpression(expressionType, filter.expression, userAttributes);
  return !!attribute && !attribute.value;
};
//# sourceMappingURL=use_filters_errors.js.map